<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dear Future Self]]></title>
  <link href="http://nrinaudo.github.io/atom.xml" rel="self"/>
  <link href="http://nrinaudo.github.io/"/>
  <updated>2014-01-03T14:47:43+01:00</updated>
  <id>http://nrinaudo.github.io/</id>
  <author>
    <name><![CDATA[Nicolas Rinaudo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Always use the tailrec annotation]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/11/05/always-use-the-tailrec-annotation/"/>
    <updated>2013-11-05T14:29:00+01:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/11/05/always-use-the-tailrec-annotation</id>
    <content type="html"><![CDATA[<p>Deaf future self,</p>

<p>I’ve been asked a few times why I try to systematically use the <code>@scala.annotation.tailrec</code> annotation - surely I’m smart
enough to know when my code is tail-recursive?</p>

<!-- more -->


<p>The simple answer is that you cannot always know or remember all the reasons why the compiler might refuse to optimise
your code for tail-recursion - or at least realise that your code exhibits such symptoms.</p>

<p>A simple example I discovered recently is overridable methods. The following code shows a method that looks fairly
tail-recursive (even if singularly useless) at a glance, but really isn’t:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Demo</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">countDown</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span>       <span class="n">countDown</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Causes a StackOverflowError</span>
</span><span class='line'><span class="k">new</span> <span class="nc">Demo</span><span class="o">().</span><span class="n">countDown</span><span class="o">(</span><span class="nc">Int</span><span class="o">.</span><span class="nc">MaxValue</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding the <code>@scala.annotation.tailrec</code> annotation allows the compiler to warn me of the issue before my code blows up in
production: <code>error: could not optimize @tailrec annotated method countDown: it is neither private nor final so can be
overridden.</code></p>

<p>It also provides enough of a hint to work out an acceptable solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Demo</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">countDown</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@scala</span><span class="o">.</span><span class="n">annotation</span><span class="o">.</span><span class="n">tailrec</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">run</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">else</span>       <span class="n">run</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="n">run</span><span class="o">(</span><span class="n">i</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Runs all the way to the end.</span>
</span><span class='line'><span class="k">new</span> <span class="nc">Demo</span><span class="o">().</span><span class="n">countDown</span><span class="o">(</span><span class="nc">Int</span><span class="o">.</span><span class="nc">MaxValue</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having the recursive code in a nested function ensures that it cannot be overridden, which allows the compiler to
optimise it for tail-recursion. <code>countDown</code> is now safe to call, but I’d never even realised there was a potential issue
without the <code>tailrec</code> annotation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type classes in Scala]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/10/21/type-classes-in-scala/"/>
    <updated>2013-10-21T16:37:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/10/21/type-classes-in-scala</id>
    <content type="html"><![CDATA[<p>Deaf future self,</p>

<p>I&#8217;ve recently noticed how often <em>type classes</em> came up in discussions about Scala, and how I had no idea what it meant.
It turns out to be a much simpler concept than expected, and a very powerfull one too.</p>

<!-- more -->


<h2>Purpose</h2>

<p>Type classes are used to retroactively add features to classes <em>without modifying them</em>.</p>

<p>Say, for example, that you&#8217;re using an external library that exposes a <code>Person</code> class, implemented as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Person</span><span class="o">(</span><span class="n">first</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">last</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">toString</span> <span class="k">=</span> <span class="s">&quot;%s %s&quot;</span> <span class="n">format</span> <span class="o">(</span><span class="n">first</span><span class="o">,</span> <span class="n">last</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your application holds a <code>List</code> of <code>Person</code> instances, and you&#8217;d like to sort them, say, alphabetically by family name.
At this point, if the external library hasn&#8217;t already made <code>Person</code> sortable, you have very few options.</p>

<p>The first one is to create an adapter that implements
<a href="http://www.scala-lang.org/api/current/index.html#scala.math.Ordered">Ordered</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">OrderedPerson</span><span class="o">(</span><span class="k">val</span> <span class="n">wrapped</span><span class="k">:</span> <span class="kt">Person</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Ordered</span><span class="o">[</span><span class="kt">OrderedPerson</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">compare</span><span class="o">(</span><span class="n">that</span><span class="k">:</span> <span class="kt">OrderedPerson</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">wrapped</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">compareTo</span><span class="o">(</span><span class="n">that</span><span class="o">.</span><span class="n">wrapped</span><span class="o">.</span><span class="n">last</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">toString</span> <span class="k">=</span> <span class="n">wrapped</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works, but with a few flaws:</p>

<ul>
<li>you&#8217;re not working with instances of <code>Person</code> anymore, and need to transform your objects back and forth (or have
<code>OrderedPerson</code> extend <code>Person</code> and proxy every single method)</li>
<li>implementing multiple sorting strategies (by first name, for example) is possible but requires a lot of legwork</li>
</ul>


<p>The other solution is using <a href="http://www.scala-lang.org/api/current/index.html#scala.math.Ordering">Ordering</a>
as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">object</span> <span class="nc">LastNameOrdering</span> <span class="k">extends</span> <span class="nc">Ordering</span><span class="o">[</span><span class="kt">Person</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">compare</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Person</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Person</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">compareTo</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="n">last</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since all Scala methods that sort objects accept an instance of <code>Ordering</code> (<code>List.sorted</code>, <code>Sorting.quickSort</code>&#8230;),
<code>LastNameOrdering</code> has just retrofitted <code>Person</code> with the ability to be sorted without actually modifying its code.
Implementing another sorting strategy is simply done by writing another implementation of <code>Ordering</code>. Additionally,
since all methods that expect an instance of <code>Ordering</code> declare it as an implicit parameter, and we&#8217;ve made
<code>LastNameOrdering</code> an implicit object, we don&#8217;t even need to explicitly pass it around - as long as it&#8217;s in scope, it
will be used automatically by the compiler.</p>

<p><code>Ordering</code> is a perfect example of what a type class is. Using technical words, the adapter pattern uses <em>subtype
polymorphism</em> while type classes use <em>parametric polymorphism</em>.</p>

<h2>Writing a type class</h2>

<p>We now have a better understanding of what a type class is. Implementing one requires surprisingly little code and,
thanks to Scala&#8217;s support of implicit parameters, can be made all but invisible to callers.</p>

<p>Let&#8217;s say that our application requires a facility for printing <code>Person</code> to <code>stdout</code>. A naive first implementation could
be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Printer</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">print</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">Person</span><span class="o">)</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">p</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works, but is very limiting:</p>

<ul>
<li>the only supported format is that implemented by the <code>toString</code> method, and we&#8217;d need to write adapter classes for
each format we want to add</li>
<li>it only works for <code>Person</code> - what if we have another <code>Company</code> class that we&#8217;d like to print to stdout as well? Do we
need to write an entirely different printing facility for that?</li>
</ul>


<p>This is were type classes really shine. Instead of letting the object being printed decide how to format itself, we
create a trait and delegate that responsability to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Used solely for the purpose of formatting instances of A.</span>
</span><span class='line'><span class="k">trait</span> <span class="nc">Formatter</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">format</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Printer</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Now accepts two parameters: an object to print, and an object that knows how to format it.</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">print</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">,</span> <span class="n">f</span><span class="k">:</span> <span class="kt">Formatter</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">a</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Person specific formatter.</span>
</span><span class='line'><span class="k">object</span> <span class="nc">PersonFormatter</span> <span class="k">extends</span> <span class="nc">Formatter</span><span class="o">[</span><span class="kt">Person</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">format</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Person</span><span class="o">)</span> <span class="k">=</span> <span class="n">a</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We&#39;ve now entirely de-coupled Person and its formatting mechanism.</span>
</span><span class='line'><span class="nc">Printer</span><span class="o">.</span><span class="n">print</span><span class="o">(</span><span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">&quot;Robert&quot;</span><span class="o">,</span> <span class="s">&quot;Smith&quot;</span><span class="o">),</span> <span class="nc">PersonFormatter</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is nice but a bit verbose. As usual, Scala has mechanism to reduce the verbosity: implicit parameters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Printer</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// The formatter is now an implicit parameter.</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">print</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">f</span><span class="k">:</span> <span class="kt">Formatter</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">a</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Declares an implicit Formatter[Person] in scope.</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">object</span> <span class="nc">PersonFormatter</span> <span class="k">extends</span> <span class="nc">Formatter</span><span class="o">[</span><span class="kt">Person</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">format</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Person</span><span class="o">)</span> <span class="k">=</span> <span class="n">a</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We can now omit the formatter entirely.</span>
</span><span class='line'><span class="nc">Printer</span><span class="o">.</span><span class="n">print</span><span class="o">(</span><span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">&quot;Robert&quot;</span><span class="o">,</span> <span class="s">&quot;Smith&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>From Scala 2.8 onwards, the same can be achieved through context bounds:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Printer</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// [A: Formatter] should be read as &quot;class that has an associated implicit Formatter&quot;.</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">print</span><span class="o">[</span><span class="kt">A:</span> <span class="kt">Formatter</span><span class="o">](</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">implicitly</span><span class="o">[</span><span class="kt">Formatter</span><span class="o">[</span><span class="kt">A</span><span class="o">]].</span><span class="n">format</span><span class="o">(</span><span class="n">a</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not only have we added a new formatting feature to <code>Person</code> without modifying its source code or extending it, but
we&#8217;ve also done it for all possible classes. Nothing in our implementation ties us to <code>Person</code>: adding support for, say,
dates, is simply done by writing a <code>Formatter</code> implementation for <code>Date</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">java.util.Date</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Formats dates as legal ISO 8601 strings.</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">object</span> <span class="nc">DateFormatter</span> <span class="k">extends</span> <span class="nc">Formatter</span><span class="o">[</span><span class="kt">Date</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">formatter</span> <span class="k">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="nc">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssz&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">format</span><span class="o">(</span><span class="n">date</span><span class="k">:</span> <span class="kt">Date</span><span class="o">)</span> <span class="k">=</span> <span class="n">formatter</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">date</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Since DateFormatter is both implicit and in scope, there&#39;s no need to pass it explicitly.</span>
</span><span class='line'><span class="nc">Printer</span><span class="o">.</span><span class="n">print</span><span class="o">(</span><span class="k">new</span> <span class="nc">Date</span><span class="o">())</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Type safety</h2>

<p>Another advantage of type classes is that, since they&#8217;re validated at compile time, they&#8217;re inherently safe. Subtype
polymorphism is mostly safe, but must rely on trust in some cases. The following (contrived) example compiles, but fails
at runtime:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">print</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Any</span><span class="o">)</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">Person</span><span class="o">].</span><span class="n">first</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">print</span><span class="o">(</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Date</span><span class="o">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>Such a situation is not possible with type classes, where all types are know to and validated by the compiler.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regular expressions in pattern matching]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/09/21/regular-expressions-in-pattern-matching/"/>
    <updated>2013-09-21T19:00:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/09/21/regular-expressions-in-pattern-matching</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>While reading <code>Regex</code>&#8217;s
<a href="http://www.scala-lang.org/files/archive/nightly/docs/library/index.html#scala.util.matching.Regex">documentation</a>, I
discovered that it had a legal <code>unapplySeq</code> implementation. This means that it can be used in pattern matching, which
I&#8217;m not sure is going to be terribly useful but is certainly very cool.</p>

<!-- more -->


<p>The most immediate use of <code>Regex</code>&#8217;s <code>unapplySeq</code> method is to let us write code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.util.matching._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The usual 2D point class, with a horizontal and vertical coordinate.</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Note the .r at the end of each line, which transforms a string into an instance of Regex</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">left</span>   <span class="k">=</span> <span class="s">&quot;left ([0-9]+)&quot;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">right</span>  <span class="k">=</span> <span class="s">&quot;right ([0-9]+)&quot;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">top</span>    <span class="k">=</span> <span class="s">&quot;top ([0-9]+)&quot;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">bottom</span> <span class="k">=</span> <span class="s">&quot;bottom ([0-9]+)&quot;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The beauty of pattern matching with regular expressions.</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">handle</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Point</span> <span class="o">=</span> <span class="n">s</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">left</span><span class="o">(</span><span class="n">p</span><span class="o">)</span>   <span class="k">=&gt;</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="o">.</span><span class="n">toInt</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">right</span><span class="o">(</span><span class="n">p</span><span class="o">)</span>  <span class="k">=&gt;</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">p</span><span class="o">.</span><span class="n">toInt</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">top</span><span class="o">(</span><span class="n">p</span><span class="o">)</span>    <span class="k">=&gt;</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">bottom</span><span class="o">(</span><span class="n">p</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">p</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Point(-10,5)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="nc">Point</span><span class="o">().</span><span class="n">handle</span><span class="o">(</span><span class="s">&quot;left 10&quot;</span><span class="o">).</span><span class="n">handle</span><span class="o">(</span><span class="s">&quot;bottom 5&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another fun use, but one that I don&#8217;t think I&#8217;ll be using in live code because of how odd it can be to read, is to
parse and assign variables at definition time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">point</span> <span class="k">=</span> <span class="s">&quot;\\(([0-9]+),([0-9]+)\\)&quot;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// It might be because I haven&#39;t seen this pattern enough yet, but I always read this as calling a function</span>
</span><span class='line'><span class="c1">// on variables that haven&#39;t been defined yet.</span>
</span><span class='line'><span class="k">val</span> <span class="n">point</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;(10,12)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;10 / 12&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;%s / %s&quot;</span> <span class="n">format</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logarithm base in algorithm complexity]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/09/15/logarithm-base-in-algorithm-complexity/"/>
    <updated>2013-09-15T11:15:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/09/15/logarithm-base-in-algorithm-complexity</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>I was reading up on algorithm complexity and found a paragraph that casually tossed the following bit of information:
if an algorithm&#8217;s complexity contains a logarithm, its base is irrelevant.</p>

<p>This was not demonstrated in any way, just left for the reader to accept. In hindsight, that&#8217;s probably because it
should be obvious to anyone with some level of familiarity with logarithms, but it wasn&#8217;t to me and I set out to
understand and prove that assertion.</p>

<!-- more -->


<h2>Constants in algorithm complexity</h2>

<p>The first step to understanding the irrelevance of a logarithm&#8217;s base when expressing algorithm complexity is to
remember that constants are considered irrelevant: a complexity of <code>2N</code> is expressed as <code>N</code>.</p>

<p>With that in mind, we &#8220;only&#8221; need to prove that logarithms with different bases are linked together by a constant:</p>

<p>$$\forall i,j \, \exists c_{ij} \mid \forall x \, log_i(x) = c_{ij} * log_j(x)$$</p>

<h2>Linking two logarithms with different bases</h2>

<p>Finding this $c_{ij}$ constant turns out to be surprisingly easy, even for someone whose math skills are as rusty as
mine.</p>

<p>Let&#8217;s start from the definition of a logarithm:
$$y = log_i(x) \Leftrightarrow x = i^y \Leftrightarrow log_j(x) = log_j(i^y) \Leftrightarrow log_j(x) = y * log_j(i)$$</p>

<p>Replacing <code>y</code> by its actual value, we get:
$$log_j(x) = log_i(x) * log_j(i)$$</p>

<p>Which allows us to state what we set out to prove:
$$\forall i,j,x \, log_j(x) = log_j(i) * log_j(x)$$</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type variance in Scala]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/09/08/type-variance-in-scala/"/>
    <updated>2013-09-08T21:17:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/09/08/type-variance-in-scala</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>Type variance is a subject that I&#8217;ve long found confusing and counter-intuitive. Attempting to use the semi-mystical
<code>[+A]</code> or <code>[-A]</code> type annotations would, more often than not, yield an obscure
<code>covariant type A occurs in contravariant position in type A...</code> compilation error.</p>

<p>I&#8217;ve finally decided to bite the bullet and make sense of it all. This post is what I came up with after hacking at /
reading on type variance until I decided I had it as figured out as I was likely to for the time being.</p>

<!-- more -->


<h2>Type variance</h2>

<p>Type variance is in itself a fairly simple concept: classes who process or store values often do not need to know the
exact type of these values, or only need them to follow a small set of constraints.</p>

<p>For example, a <code>List</code> doesn&#8217;t really need to know what it stores - it&#8217;ll behave exactly the same way whether it contains
instances of <code>Int</code> or <code>String</code>.</p>

<p>One simple way of writing the <code>List</code> class to reflect this is to have it store instances of <code>AnyRef</code>, but that would be
at the cost of type safety: since there is no constraint on the stored elements, there&#8217;s nothing to prevent a <code>List</code>
from storing instances of both <code>Int</code> and <code>String</code>.</p>

<p>Type variance allows you to turn the type of elements contained by <code>List</code> into a parameter, through the following
syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// A is the type manipulated by List.</span>
</span><span class='line'><span class="k">trait</span> <span class="nc">List</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// A can be referenced in List&#39;s body.</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">cons</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This declares a <code>List</code> trait that contains elements of type <code>A</code>, to be defined at declaration time. There&#8217;s what I feel
is an unfortunate wealth of vocabulary to describe this:</p>

<ul>
<li><code>List</code> is <em>generic</em> (it doesn&#8217;t work with a <em>specific</em> type).</li>
<li><code>List</code> is a type constructor (it accepts a parameter and defines a new type depending on this parameter&#8217;s value).</li>
<li><code>List</code> varies on <code>A</code>.</li>
</ul>


<p>Using the previous declaration of <code>List</code>, it becomes possible to write code that is both generic and type safe:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Declares a list that will only accept instances of Int (or subclasses).</span>
</span><span class='line'><span class="k">val</span> <span class="n">li</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Works fine: 1 is an Int.</span>
</span><span class='line'><span class="n">li</span><span class="o">.</span><span class="n">cons</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Doesn&#39;t work: &quot;foobar&quot; is not an Int.</span>
</span><span class='line'><span class="n">li</span><span class="o">.</span><span class="n">cons</span><span class="o">(</span><span class="s">&quot;foobar&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you might sometimes want to have a list of elements of any type - this is easily achieved by declaring it
as <code>List[AnyRef]</code>.</p>

<p>There are different kinds of type variance, each with its own rules for subtyping. I&#8217;ll explore these in the rest of
this post, using the following traditionnal class hierarchy for illustration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// A Mammal has a name.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Mammal</span><span class="o">(</span><span class="k">val</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// A Dog is a Mammal that can bark.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Mammal</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">bark</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;bark!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// A Cat is a Mammal that purrs.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Cat</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Mammal</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">purr</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;purrrr&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Invariance</h2>

<p>By default, generic classes are <em>invariant</em> on their parameter(s): whatever the relation between <code>A</code> and <code>B</code>, there
won&#8217;t be any particular relationship between <code>List[A]</code> and <code>List[B]</code> - <code>B</code> could, for example, be a subclass of
<code>A</code>, but this would have no bearing on how <code>List[B]</code> relates to <code>List[A]</code>.</p>

<p><code>List</code> is a nice example in that it&#8217;s a well known structure that&#8217;s easy to reason about, but it&#8217;s a bit cumbersome
when I wish to write actual code. Let&#8217;s declare a simple <code>Wrapper</code> class, <em>invariant</em> in <code>A</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Wrapper</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="k">val</span> <span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Retrieves the wrapped value.</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">get</span> <span class="k">=</span> <span class="n">a</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since <code>Wrapper</code> is <em>invariant</em> on its parameter, there is no relation between <code>Wrapper[Dog]</code> and <code>Wrapper[Mammal]</code>,
as shown in the following example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Does not compile: a Wrapper[Mammal] is not an instance of Wrapper[Dog]</span>
</span><span class='line'><span class="k">val</span> <span class="n">wd</span><span class="k">:</span> <span class="kt">Wrapper</span><span class="o">[</span><span class="kt">Dog</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Wrapper</span><span class="o">(</span><span class="k">new</span> <span class="nc">Mammal</span><span class="o">(</span><span class="s">&quot;Flipper&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Does not compile: a Wrapper[Dog] is not an instance of Wrapper[Mammal].</span>
</span><span class='line'><span class="k">val</span> <span class="n">wm</span><span class="k">:</span> <span class="kt">Wrapper</span><span class="o">[</span><span class="kt">Mammal</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Wrapper</span><span class="o">[</span><span class="kt">Dog</span><span class="o">](</span><span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="s">&quot;Lassie&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>That last one is a bit of a shame, though: since a <code>Dog</code> is a <code>Mammal</code>, surely a <code>Wrapper[Dog]</code> should be a
<code>Wrapper[Mammal]</code> as well? This is what <em>covariance</em> is.</p>

<h2>Covariance</h2>

<p>Saying that a class <code>C</code> is <em>covariant</em> on its parameter is saying that if <code>A</code> extends <code>B</code>, then <code>C[A]</code> extends <code>C[B]</code>.</p>

<p>In scala, making a class <em>covariant</em> on its parameter is achieved with the <code>+</code> modifier, as in the following example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Wrapper</span><span class="o">[</span><span class="kt">+A</span><span class="o">](</span><span class="k">val</span> <span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">get</span> <span class="k">=</span> <span class="n">a</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With <code>Wrapper</code> thus modified, our previous example works as expected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Does not compile: a Wrapper[Mammal] is not an instance of Wrapper[Dog]</span>
</span><span class='line'><span class="k">val</span> <span class="n">wd</span><span class="k">:</span> <span class="kt">Wrapper</span><span class="o">[</span><span class="kt">Dog</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Wrapper</span><span class="o">(</span><span class="k">new</span> <span class="nc">Mammal</span><span class="o">(</span><span class="s">&quot;Flipper&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Now compiles: Wrapper is covariant, so a Wrapper[Dog] is a Wrapper[Mammal]</span>
</span><span class='line'><span class="k">val</span> <span class="n">wm</span><span class="k">:</span> <span class="kt">Wrapper</span><span class="o">[</span><span class="kt">Mammal</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Wrapper</span><span class="o">[</span><span class="kt">Dog</span><span class="o">](</span><span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="s">&quot;Lassie&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Contravariance</h2>

<p><em>Contravariance</em> is the exact opposite of <em>covariance</em>: saying that a class <code>C</code> is <em>contravariant</em> on its parameter is
saying that if <code>A</code> extends <code>B</code>, then <code>C[B]</code> extends <code>C[A]</code>.</p>

<p>In scala, making a class <em>contravariant</em> on its parameter is achieved with the <code>-</code> modifier, as in the following
example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Printer</span><span class="o">[</span><span class="kt">-A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Prints its argument.</span>
</span><span class='line'>  <span class="c1">// The reason why this method is named apply rather than, say, print will become clear later in this post.</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a bit counter intuitive, but makes sense in the case of classes used to <em>process</em> rather than <em>store</em> others:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Note how this calls a method defined in Dog but not in Mammal.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">DogPrinter</span> <span class="k">extends</span> <span class="nc">Printer</span><span class="o">[</span><span class="kt">Dog</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Dog</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class='line'>    <span class="n">a</span><span class="o">.</span><span class="n">bark</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Since Printer is contravariant, an instance of MammalPrinter is a valid instance of Printer[Dog].</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MammalPrinter</span> <span class="k">extends</span> <span class="nc">Printer</span><span class="o">[</span><span class="kt">Mammal</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Mammal</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Compiles: a Printer[Mammal] is a valid Printer[Dog].</span>
</span><span class='line'><span class="k">val</span> <span class="n">wd</span><span class="k">:</span> <span class="kt">Printer</span><span class="o">[</span><span class="kt">Dog</span><span class="o">]</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">MammalPrinter</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Does not compile: a Printer[Dog] is not a valid Printer[Mammal].</span>
</span><span class='line'><span class="c1">// If unsure why, consider what happens when DogPrinter calls the bark() method on an instance of Mammal.</span>
</span><span class='line'><span class="k">val</span> <span class="n">wm</span><span class="k">:</span> <span class="kt">Printer</span><span class="o">[</span><span class="kt">Mammal</span><span class="o">]</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">DogPrinter</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Function variance</h2>

<p>Before explaining the compilation errors mentionned in the introduction of this post, we must take a closer look at
functions and how they vary on their parameters and return types.</p>

<p>In Scala, functions are instances. A unary function, for example, is an instance of <code>Function1[-T, +R]</code>, where <code>T</code> is
the type of the function&#8217;s parameter and <code>R</code> that of its return value.</p>

<p>It&#8217;s critical to understand why <code>Function1</code> is <em>contravariant</em> on its parameter type and <em>covariant</em> on its return
type: most of the complexity of type variance comes from that simple fact.</p>

<h3>Parameter type</h3>

<p>While this might not be obvious at a glance, we&#8217;ve already proven that a unary function was <em>contravariant</em> on its
parameter type.</p>

<p>The <code>Printer</code> trait we defined previously fulfills all the requirements of a unary function. We can in fact have it
extends <code>Function1[A, Unit]</code> without changing anything else in our previous code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Printer</span><span class="o">[</span><span class="kt">-A</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">Function1</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">Unit</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The conclusion we previously reached on <code>Printer</code> still applies: it must be <em>contravariant</em> on <code>A</code>, which means that
a function is <em>contravariant</em> on its parameters.</p>

<h3>Return type</h3>

<p>By the same token, we&#8217;ve already proven that a function was <em>covariant</em> on its return type: our <code>Wrapper</code> class is
a valid <code>Function1[Unit, A]</code> and can be modified as follows without changing anything else:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Wrapper</span><span class="o">[</span><span class="kt">+A</span><span class="o">](</span><span class="k">val</span> <span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Function1</span><span class="o">[</span><span class="kt">Unit</span>, <span class="kt">A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">v</span><span class="k">:</span> <span class="kt">Unit</span><span class="o">)</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The conclusion we previously reached on <code>Wrapper</code> still applies: it must be <em>covariant</em> on <code>A</code>, which means that
a function is <em>covariant</em> on its return type.</p>

<h2>Explanation of the compilation errors</h2>

<h3>Covariant in contravariant position</h3>

<p>We now have all the necessary keys to understand the dreaded
<code>covariant type A occurs in contravariant position in type A...</code> error message.</p>

<p>Let&#8217;s first modify our <code>Wrapper</code> class to cause the issue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Wrapper</span><span class="o">[</span><span class="kt">+A</span><span class="o">](</span><span class="k">val</span> <span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">get</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// This method will cause a compilation error message.</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">set</span><span class="o">(</span><span class="n">va</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Wrapper</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Wrapper</span><span class="o">(</span><span class="n">va</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Armed with our newfound type variance knowledge, this isn&#8217;t actually so hard to understand: <code>Wrapper</code> is <em>covariant</em> on
<code>A</code> while <code>set</code> is <em>contravariant</em> on <code>A</code> (its parameter type), which is clearly an issue.</p>

<p>Luckily, Scala provides an easy work around through lower type bounds:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Wrapper</span><span class="o">[</span><span class="kt">+A</span><span class="o">](</span><span class="k">val</span> <span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">get</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Notice how the signature has changed.</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">set</span><span class="o">[</span><span class="kt">B</span> <span class="k">&gt;:</span> <span class="kt">A</span><span class="o">](</span><span class="n">vb</span><span class="k">:</span> <span class="kt">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">Wrapper</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Wrapper</span><span class="o">(</span><span class="n">vb</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>[B &gt;: A]</code> bit is telling Scala that a local type <code>B</code> has been declared, and that <code>B</code> must always be a superclass
of <code>A</code>.</p>

<p>With that modification, <code>set</code> is no longer <em>covariant</em> on <code>A</code>: its parameters are going to be of type <code>A</code> or something
more general, which respects the <em>contravariance</em> of a function&#8217;s parameter type.</p>

<p>This is all a bit theoretical, so let&#8217;s take a concrete example. Let&#8217;s pretend that the Scala compiler accepts the
following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Wrapper</span><span class="o">[</span><span class="kt">+A</span><span class="o">](</span><span class="k">val</span> <span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">get</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">set</span><span class="o">(</span><span class="n">va</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Wrapper</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Wrapper</span><span class="o">(</span><span class="n">va</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If this were to be considered correct, we&#8217;d be able to write the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">BorkedWrapper</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Dog</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Wrapper</span><span class="o">[</span><span class="kt">Dog</span><span class="o">](</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">set</span><span class="o">(</span><span class="n">vd</span><span class="k">:</span> <span class="kt">Dog</span><span class="o">)</span><span class="k">:</span> <span class="kt">Wrapper</span><span class="o">[</span><span class="kt">Dog</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Pay attention to the fact that we&#39;re calling bark(), that&#39;s the important bit.</span>
</span><span class='line'>    <span class="n">vd</span><span class="o">.</span><span class="n">bark</span><span class="o">()</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">BorkedWrapper</span><span class="o">(</span><span class="n">vd</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Wrapper is covariant on A, and Dog is a subtype of Mammal: an instance of Wrapper[Dog] is a legal instance of</span>
</span><span class='line'><span class="c1">// Wrapper[Mammal]. The following line is perfectly legal.</span>
</span><span class='line'><span class="k">val</span> <span class="n">wd</span><span class="k">:</span> <span class="kt">Wrapper</span><span class="o">[</span><span class="kt">Mammal</span><span class="o">]</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">BorkedWrapper</span><span class="o">(</span><span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="s">&quot;Lassie&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// A `Cat` is a legal instance of `Mammal`, there&#39;s nothing wrong with setting one to a Wrapper[Mammal]</span>
</span><span class='line'><span class="n">wd</span><span class="o">.</span><span class="n">set</span><span class="o">(</span><span class="k">new</span> <span class="nc">Cat</span><span class="o">(</span><span class="s">&quot;Duchess&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Scala just let us write code that calls the <code>bark</code> method of <code>Cat</code>, which is obviously impossible - that&#8217;s where the
compilation error comes from. If were, however, to use lower type bounds, we&#8217;d find we can&#8217;t provoque such a scenario
anymore:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Wrapper</span><span class="o">[</span><span class="kt">+A</span><span class="o">](</span><span class="k">val</span> <span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">get</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">set</span><span class="o">[</span><span class="kt">B</span> <span class="k">&gt;:</span> <span class="kt">A</span><span class="o">](</span><span class="n">vb</span><span class="k">:</span> <span class="kt">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">Wrapper</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Wrapper</span><span class="o">(</span><span class="n">vb</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This class doesn&#39;t compile anymore: the set method doesn&#39;t actually overwrite Wrapper&#39;s, since they don&#39;t share</span>
</span><span class='line'><span class="c1">// parameter types. As an aside, that&#39;s as perfect an example of the benefit of explicitely writing override as I&#39;m</span>
</span><span class='line'><span class="c1">// likely to find: not using it here would allow the code to compile, and figuring out that we&#39;re actually declaring</span>
</span><span class='line'><span class="c1">// two different set methods might take a while.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BorkedWrapper</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Dog</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Wrapper</span><span class="o">[</span><span class="kt">Dog</span><span class="o">](</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">set</span><span class="o">(</span><span class="n">vd</span><span class="k">:</span> <span class="kt">Dog</span><span class="o">)</span><span class="k">:</span> <span class="kt">Wrapper</span><span class="o">[</span><span class="kt">Dog</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">vd</span><span class="o">.</span><span class="n">bark</span><span class="o">()</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">BorkedWrapper</span><span class="o">(</span><span class="n">vd</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This doesn&#39;t compile either:</span>
</span><span class='line'><span class="c1">// - B doesn&#39;t have a bark method</span>
</span><span class='line'><span class="c1">// - new DogWrapper(vb) is not legal, since vb is not necessarily an instance of Dog.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">DogWrapper</span><span class="o">(</span><span class="n">d</span><span class="k">:</span> <span class="kt">Dog</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Wrapper</span><span class="o">[</span><span class="kt">Dog</span><span class="o">](</span><span class="n">d</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">set</span><span class="o">[</span><span class="kt">B</span> <span class="k">&gt;:</span> <span class="kt">Dog</span><span class="o">](</span><span class="n">vb</span><span class="k">:</span> <span class="kt">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">Wrapper</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">vb</span><span class="o">.</span><span class="n">bark</span><span class="o">()</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">DogWrapper</span><span class="o">(</span><span class="n">vb</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">wd</span><span class="k">:</span> <span class="kt">Wrapper</span><span class="o">[</span><span class="kt">Dog</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Wrapper</span><span class="o">(</span><span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="s">&quot;Lassie&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This is now legal: Mammal is a superclass of Dog, so it can be passed to set.</span>
</span><span class='line'><span class="c1">// Note that the returned value is no longer an instance of Wrapper[Dog] but of Wrapper[Mammal].</span>
</span><span class='line'><span class="k">val</span> <span class="n">wm</span><span class="k">:</span> <span class="kt">Wrapper</span><span class="o">[</span><span class="kt">Mammal</span><span class="o">]</span> <span class="k">=</span> <span class="n">wd</span><span class="o">.</span><span class="n">set</span><span class="o">(</span><span class="k">new</span> <span class="nc">Cat</span><span class="o">(</span><span class="s">&quot;Duchess&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Contravariant in covariant position</h3>

<p>There is of course a symmetrical issue for <em>contravariance</em>, which can be seen with the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Printer</span><span class="o">[</span><span class="kt">-A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">A</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This causes the following compilation error:
<code>error: contravariant type A occurs in covariant position in type (a: A)A of method apply</code>.</p>

<p>Now that we have a good understanding of <em>contravariance</em>, <em>covariance</em> and how a function varies, this actually makes
sense: <code>Printer</code> is <em>contravariant</em> on <code>A</code> while <code>apply</code> is <em>covariant</em> on it (since <code>A</code> is <code>apply</code>&#8217;s return value).</p>

<p>We fix this the same way we did before, with type bounds - although this time we use an upper bound:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Printer</span><span class="o">[</span><span class="kt">-A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">def</span> <span class="n">apply</span><span class="o">[</span><span class="kt">B</span> <span class="k">&lt;:</span> <span class="kt">A</span><span class="o">](</span><span class="n">b</span><span class="k">:</span> <span class="kt">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">B</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;d love to give a concrete example here, but I&#8217;ve failed to find a convincing one so far. I&#8217;ll update this post if I
ever do.</p>

<h2>Mutable types and variance</h2>

<p>A last note about type variance: <em>contravariance</em> and <em>covariance</em> only work with immutable structures. Mutable ones
can be <em>invariant</em>, but they cannot be made anything else.</p>

<p>As a demonstration, let&#8217;s try to make <code>Wrapper</code> mutable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Wrapper</span><span class="o">[</span><span class="kt">+A</span><span class="o">](</span><span class="k">private</span> <span class="k">var</span> <span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">get</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// This won&#39;t work: a is an instance of A and cannot be used to store instances of B, since</span>
</span><span class='line'>  <span class="c1">// B is necessarily a superclass of A.</span>
</span><span class='line'>  <span class="c1">// The only way for this to work is to force B to be the same as A - which means making</span>
</span><span class='line'>  <span class="c1">// Wrapper invariant.</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">set</span><span class="o">[</span><span class="kt">B</span> <span class="k">&gt;:</span> <span class="kt">A</span><span class="o">](</span><span class="n">vb</span><span class="k">:</span> <span class="kt">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">a</span> <span class="k">=</span> <span class="n">vb</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern matching as parameter]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/09/05/pattern-matching-as-parameter/"/>
    <updated>2013-09-05T17:25:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/09/05/pattern-matching-as-parameter</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>I just discovered a nice trick with pattern matching, which I thought I&#8217;d jot down before I forget about. It&#8217;s a
logical consequence of what I wrote on <a href="http://nrinaudo.github.io/blog/2013/08/03/partial-functions/">partial functions</a>, but it just recently
clicked: a pattern match is a legal argument for higher-order functions expecting unary functions as parameters.</p>

<!-- more -->


<p>As I previously realised, pattern matching is a shortcut for partial function creation. Since partial functions are
unary, it follows that you can pass them to higher-order functions such as, for example, <code>map</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Unwraps the specified sequence, replacing None by the specified default value.</span>
</span><span class='line'><span class="k">def</span> <span class="n">badUnwrap</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">la</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]],</span> <span class="n">da</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="n">la</span> <span class="n">map</span> <span class="o">{</span><span class="n">va</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">va</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">a</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">None</span>    <span class="k">=&gt;</span> <span class="n">da</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This is doing exactly the same thing as badUnwrap, but takes advantage of the fact</span>
</span><span class='line'><span class="c1">// that one can pass a pattern match directly to to map. I believe it looks much cleaner.</span>
</span><span class='line'><span class="k">def</span> <span class="n">unwrap</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">la</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]],</span> <span class="n">da</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="n">la</span> <span class="n">map</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">a</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">None</span>    <span class="k">=&gt;</span> <span class="n">da</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It seems obvious in hinsight, but I&#8217;d never realised that before. My OCD is probably going to force me to go and &#8220;fix&#8221;
this in all the Scala code I ever wrote&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Try to handle errors]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/08/09/using-try-to-handle-errors/"/>
    <updated>2013-08-09T16:20:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/08/09/using-try-to-handle-errors</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>While working on my current <a href="https://github.com/nrinaudo/eshitsuji">pet project</a>, I found out about Scala&#8217;s
<a href="http://www.scala-lang.org/api/current/index.html#scala.util.Try">Try</a> construct. I&#8217;m still coming to grips with it, but
it feels like <a href="blog/2013/05/13/scalas-option/">Option</a> for error handling, which is a good thing in my books. This post
is meant as a brain dump of what I&#8217;ve understood so far.</p>

<!-- more -->


<h2>Purpose</h2>

<p>An instance of <code>Try</code> represents the result of an action, either its failure (<code>Failure[Throwable]</code>) or its success
(<code>Success[T]</code>).</p>

<p>Instances of <code>Try</code> are typically retrieved through the companion object&#8217;s <code>apply</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.util.</span><span class="o">{</span><span class="nc">Try</span><span class="o">,</span> <span class="nc">Failure</span><span class="o">,</span> <span class="nc">Success</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Wraps String.toInt in Try.apply.</span>
</span><span class='line'><span class="c1">// Note that thanks to Scala&#39;s syntactic sugar, this looks just like a &#39;normal&#39; block.</span>
</span><span class='line'><span class="k">def</span> <span class="n">safeToInt</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Try</span> <span class="o">{</span><span class="n">str</span><span class="o">.</span><span class="n">toInt</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Success(42)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">safeToInt</span><span class="o">(</span><span class="s">&quot;42&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Failure(java.lang.NumberFormatException: For input string: &quot;fish&quot;)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">safeToInt</span><span class="o">(</span><span class="s">&quot;fish&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Default values</h2>

<p>Just as with <code>Option</code>, instances of <code>Try</code> make it easy to provide default values in case of failure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// getOrElse is used to provide a default value (through a by-name parameter).</span>
</span><span class='line'><span class="k">def</span> <span class="n">safeToInt</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Try</span> <span class="o">{</span><span class="n">str</span><span class="o">.</span><span class="n">toInt</span><span class="o">}</span> <span class="n">getOrElse</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;42&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">safeToInt</span><span class="o">(</span><span class="s">&quot;42&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;0&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">safeToInt</span><span class="o">(</span><span class="s">&quot;fish&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Pattern matching</h2>

<p>Instances of <code>Try</code> are convenient to manipulate through pattern matching:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">safeToInt</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Try</span> <span class="o">{</span><span class="n">str</span><span class="o">.</span><span class="n">toInt</span><span class="o">}</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Success</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Success: %d&quot;</span> <span class="n">format</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Failure</span><span class="o">(</span><span class="n">e</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Failure: %s&quot;</span> <span class="n">format</span> <span class="n">e</span><span class="o">.</span><span class="n">getMessage</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Success: 42&#39;</span>
</span><span class='line'><span class="n">safeToInt</span><span class="o">(</span><span class="s">&quot;42&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Failure: For input string: &quot;fish&quot;&#39;</span>
</span><span class='line'><span class="n">safeToInt</span><span class="o">(</span><span class="s">&quot;fish&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that this isn&#8217;t significantly less work than an old-fashionned <code>try / catch</code> block, though.</p>

<h2>Branching</h2>

<p>Just as with <code>Option</code>, instances of <code>Try</code> can be used for executing different code depending on success or failure
through the <code>map / getOrElse</code> construct:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">safeToInt</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Try</span> <span class="o">{</span><span class="n">str</span><span class="o">.</span><span class="n">toInt</span><span class="o">}</span> <span class="n">map</span> <span class="o">{</span><span class="n">i</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Success: %d&quot;</span> <span class="n">format</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span> <span class="n">getOrElse</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Failure&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Success: 42&#39;</span>
</span><span class='line'><span class="n">safeToInt</span><span class="o">(</span><span class="s">&quot;42&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Failure&#39;</span>
</span><span class='line'><span class="n">safeToInt</span><span class="o">(</span><span class="s">&quot;fish&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, this isn&#8217;t much better than a <code>try / catch</code> block. It does get much better, however, when you have multiple
instances of <code>Try</code> to deal with.</p>

<h2>Interraction with for-comprehensions</h2>

<p>Since <code>Try</code> defines both <code>map</code> and <code>flatMap</code>, it can be used in
<a href="blog/2013/04/25/scalas-for-comprehension/">for-comprehensions</a> (or in nested <code>map</code> / <code>flatMap</code> calls, depending on
your preference):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// This is where Try really shines: all possible errors are handled and passed back to the caller,</span>
</span><span class='line'><span class="c1">// with a minimum of actual code written.</span>
</span><span class='line'><span class="k">def</span> <span class="n">sum</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="nc">Try</span> <span class="o">{</span><span class="n">a</span><span class="o">.</span><span class="n">toInt</span><span class="o">};</span>
</span><span class='line'>                                    <span class="n">j</span> <span class="k">&lt;-</span> <span class="nc">Try</span> <span class="o">{</span><span class="n">b</span><span class="o">.</span><span class="n">toInt</span><span class="o">})</span> <span class="k">yield</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Success(3)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">sum</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">,</span> <span class="s">&quot;2&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Failure(java.lang.NumberFormatException: For input string: &quot;fish&quot;)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">sum</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">,</span> <span class="s">&quot;fish&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>A more generic version of the <code>sum</code> function could be written like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Recursively goes through all entries in args, attempts to parse as them integers</span>
</span><span class='line'><span class="c1">// and returns their sum (or Failure if an error occurred).</span>
</span><span class='line'><span class="k">def</span> <span class="n">sum</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">args</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">head</span> <span class="o">::</span> <span class="n">rest</span> <span class="k">=&gt;</span> <span class="k">for</span><span class="o">(</span><span class="n">a</span> <span class="k">&lt;-</span> <span class="nc">Try</span> <span class="o">{</span><span class="n">head</span><span class="o">.</span><span class="n">toInt</span><span class="o">};</span> <span class="n">b</span> <span class="k">&lt;-</span> <span class="n">sum</span><span class="o">(</span><span class="n">rest</span><span class="o">))</span> <span class="k">yield</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Nil</span>          <span class="k">=&gt;</span> <span class="nc">Success</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Success(6)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">sum</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">,</span> <span class="s">&quot;2&quot;</span><span class="o">,</span> <span class="s">&quot;3&quot;</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Failure(java.lang.NumberFormatException: For input string: &quot;fish&quot;)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">sum</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">,</span> <span class="s">&quot;2&quot;</span><span class="o">,</span> <span class="s">&quot;fish&quot;</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Other toys</h2>

<p><code>Try</code> has a few other toys that make its usage pleasant. Among them, the possibility to transform an instance of
<code>Try</code> to an instance of <code>Option</code> in a single call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">safeToInt</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Try</span> <span class="o">{</span><span class="n">str</span><span class="o">.</span><span class="n">toInt</span><span class="o">}.</span><span class="n">toOption</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Some(42)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">safeToInt</span><span class="o">(</span><span class="s">&quot;42&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;None&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">safeToInt</span><span class="o">(</span><span class="s">&quot;fish&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another nice method is <code>filter</code>, which transforms a <code>Success</code> into a <code>Failure</code> if some criteria isn&#8217;t met:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">toPositiveInt</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="nc">Try</span> <span class="o">{</span><span class="n">s</span><span class="o">.</span><span class="n">toInt</span><span class="o">}</span> <span class="n">filter</span> <span class="o">{</span><span class="k">_</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;42&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">toPositiveInt</span><span class="o">(</span><span class="s">&quot;42&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Failure(java.util.NoSuchElementException: Predicate does not hold for -42)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">toPositiveInt</span><span class="o">(</span><span class="s">&quot;-42&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Failure(java.lang.NumberFormatException: For input string: &quot;fish&quot;)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">toPositiveInt</span><span class="o">(</span><span class="s">&quot;fish&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, <code>recover</code> deserves a mention: it takes a <a href="http://nrinaudo.github.io/blog/2013/08/03/partial-functions/">partial function</a> that allows
callers to react to some specific types of failure.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">safeToInt</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Try</span> <span class="o">{</span><span class="n">str</span><span class="o">.</span><span class="n">toInt</span><span class="o">}</span> <span class="n">recover</span> <span class="o">{</span><span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">NumberFormatException</span> <span class="o">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Error&quot;</span><span class="o">);</span> <span class="mi">0</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Success(42)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">safeToInt</span><span class="o">(</span><span class="s">&quot;42&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Error\nSuccess(0)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">safeToInt</span><span class="o">(</span><span class="s">&quot;fish&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Usage in public APIs</h2>

<p>I feel that using <code>Try</code> as a return type for public functions in an API is bad form: it transforms an unchecked
exception (the cause of the <code>Failure</code>) into a checked one - after a fashion, anyway: the caller <em>must</em> deal with the
failure and cannot ignore it as he would an unchecked one.</p>

<p>In such circumstances, I think it&#8217;s better to use an exception and let the caller wrap it in a <code>Try</code> block if he needs
to.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overriding abstract methods in Scala]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/08/04/overriding-abstract-methods-in-scala/"/>
    <updated>2013-08-04T14:32:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/08/04/overriding-abstract-methods-in-scala</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>When implementing abstract methods in Scala, I always use the <code>override</code> keyword. I realised today that it appears not
to be compulsory - in fact, decompiling the generated bytecode through <code>javap</code> yields the same result whether or not
<code>override</code> was used.</p>

<p>Scala is very rarely that loose with its syntax, so I set out to understand what difference there was between the two
declarations, if any.</p>

<!-- more -->


<p>It seems the difference is mostly (only?) at compile time: <code>override</code> is a hint to the compiler that the method being
declared is thought to override a method of the same signature in one of the parent classes.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">Callable</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">call</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ConcreteCallable</span> <span class="k">extends</span> <span class="nc">Callable</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Lets the compiler know that we&#39;re expecting the call method to be declared in Callable</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Called&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ConcreteCallable2</span> <span class="k">extends</span> <span class="nc">Callable</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Doesn&#39;t give any hint to the compiler.</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Called&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This distinction matters when <code>Callable</code>&#8217;s contract change: if the <code>call</code> method were to disappear for whatever reason:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">Callable</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fails to compile with the following message:</span>
</span><span class='line'><span class="c1">// error: method call overrides nothing</span>
</span><span class='line'><span class="c1">//  override def call() {</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ConcreteCallable</span> <span class="k">extends</span> <span class="nc">Callable</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Called&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Compiles just fine.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ConcreteCallable2</span> <span class="k">extends</span> <span class="nc">Callable</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Called&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I find the compilation error to be the desirable behaviour: it lets me know immediately that <code>ConcreteCallable</code> isn&#8217;t
doing what it thinks it&#8217;s doing anymore, and needs reviewing. The solution might sometimes be to remove the <code>override</code>
keyword, but more often than not, the compilation failure will forestall a hard-to-understand bug before it even has a
chance to manifest itself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Partial Functions]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/08/03/partial-functions/"/>
    <updated>2013-08-03T19:14:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/08/03/partial-functions</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>I <a href="https://twitter.com/NicolasRinaudo/status/351807385217679360">recently realised</a> that partial functions and
partially applied functions were two fundamentally different things. Unfortunately, while I now <em>know</em> they&#8217;re not the
same, I still can&#8217;t remember which is which.</p>

<p>This post will explore partial functions and how to use them, since I&#8217;m tired of looking this up every other week.</p>

<!-- more -->


<h2>Origin of the name</h2>

<p>It would appear that partial functions are originally a mathematical concept: they are functions that are only defined
for a subset of the input domain (as opposed to <em>total</em> functions, which are defined for the entirety of this domain).</p>

<p>The square root function, for example, is a partial function: <code>sqrt(x)</code> is only defined for positive values of <code>x</code>.</p>

<h2>Partial functions in Scala</h2>

<p>Scala&#8217;s partial function are exactly the same as their mathematical counterparts: they&#8217;re only defined for a subset of
their input domain.</p>

<p>In practical terms, a partial function is an instance of <code>PartialFunction</code>, which is roughly an instance of <code>Function1</code>
with an added <code>isDefinedAt</code> method whose purpose is to let callers know whether the function is defined for a particular
value.</p>

<p>One could write a partial version of <code>math.sqrt</code> as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">sqrt</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">PartialFunction</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Double</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// sqrt is only defined for positive numbers.</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">isDefinedAt</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">p</span> <span class="o">&gt;=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Should this be called on a negative number, a MatchError would be thrown.</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">p</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">a</span> <span class="k">if</span> <span class="n">a</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">=&gt;</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s rather a lot of code to write for something that simple, though. As usual, Scala has dedicated syntax to make
this much easier to write: <code>case</code> statements.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// This is strictly equivalent to our previous example, but with much less boilerplate.</span>
</span><span class='line'><span class="c1">// Note that a partial function&#39;s type cannot be inferred and needs always be fully declared.</span>
</span><span class='line'><span class="k">val</span> <span class="n">sqrt</span><span class="k">:</span> <span class="kt">PartialFunction</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">p</span> <span class="k">if</span> <span class="n">p</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">=&gt;</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="o">(</span><span class="n">p</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;true&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">sqrt</span><span class="o">.</span><span class="n">isDefinedAt</span><span class="o">(</span><span class="mi">4</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;2.0&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">sqrt</span><span class="o">(</span><span class="mi">4</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;false&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">sqrt</span><span class="o">.</span><span class="n">isDefinedAt</span><span class="o">(-</span><span class="mi">4</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Throws a MatchError</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">sqrt</span><span class="o">(-</span><span class="mi">4</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Collecting values through partial functions</h2>

<p>Now that we know what partial functions are, one might wonder what&#8217;s the point of them. Frankly, I initially thought they
were a bit of an affectation and not terribly useful, until I encountered <code>Seq</code>&#8217;s <code>collect</code> method.</p>

<p><code>collect</code> takes a partial function as a parameter and acts a bit like <code>map</code>, but only for values for which its
parameter&#8217;s <code>isDefinedAt</code> method returns <code>true</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">sqrt</span><span class="k">:</span> <span class="kt">PartialFunction</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">p</span> <span class="k">if</span> <span class="n">p</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">=&gt;</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="o">(</span><span class="n">p</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">n</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="o">-</span><span class="mi">4</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="o">-</span><span class="mi">9</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="o">-</span><span class="mi">16</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;List(2.0, 3.0, 4.0)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">n</span> <span class="n">collect</span> <span class="n">sqrt</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As an aside, a <code>Seq</code> is an implementation of <code>PartialFunction</code>, which has the odd side-effect of allowing us to write
the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">from</span>    <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="o">-</span><span class="mi">4</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="o">-</span><span class="mi">9</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="o">-</span><span class="mi">16</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">indexes</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// For each value x of indexes such that from(x) is defined, collect from(x).</span>
</span><span class='line'><span class="c1">// Or, in plain english, extracts the values of from found at the values defined in indexes.</span>
</span><span class='line'><span class="c1">// This prints &#39;List(4, 9, 16)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">indexes</span> <span class="n">collect</span> <span class="n">from</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Chaining partial functions</h2>

<p>Another interesting feature of partial function is that they can be chained together through their <code>orElse</code> and
<code>andThen</code> methods.</p>

<p><code>orElse</code> is used to call another partial function for all values that aren&#8217;t supported by the first one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Multiplies all odd values by 2.</span>
</span><span class='line'><span class="k">val</span> <span class="n">times2</span><span class="k">:</span> <span class="kt">PartialFunction</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">p</span><span class="k">:</span> <span class="kt">Int</span> <span class="kt">if</span> <span class="kt">p</span> <span class="kt">%</span> <span class="err">2</span> <span class="o">=</span><span class="k">=</span> <span class="mi">1</span> <span class="k">=&gt;</span> <span class="n">p</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Adds 1 to all even values.</span>
</span><span class='line'><span class="k">val</span> <span class="n">plus1</span><span class="k">:</span> <span class="kt">PartialFunction</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">p</span><span class="k">:</span> <span class="kt">Int</span> <span class="kt">if</span> <span class="kt">p</span> <span class="kt">%</span> <span class="err">2</span> <span class="o">=</span><span class="k">=</span> <span class="mi">0</span> <span class="k">=&gt;</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This will call times2 for all odd values and plus1 for all even ones.</span>
</span><span class='line'><span class="k">val</span> <span class="n">chained</span> <span class="k">=</span> <span class="n">times2</span> <span class="n">orElse</span> <span class="n">plus1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;List(2, 3, 6, 5, 10, 7)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">)</span> <span class="n">collect</span> <span class="n">chained</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>andThen</code> is used to call another partial function after the first one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// This will call plus1(times2(x)) for all odd values of x.</span>
</span><span class='line'><span class="k">val</span> <span class="n">chained</span> <span class="k">=</span> <span class="n">times2</span> <span class="n">andThen</span> <span class="n">plus1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;List(3, 7, 11)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">)</span> <span class="n">collect</span> <span class="n">chained</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Lifting partial functions</h2>

<p>Finally, Scala makes it easy to turn a partial function into a total one that returns instances of <code>Option</code> and
vice-versa through <code>PartialFunction.lift</code> and <code>Function.unlift</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">sqrt</span><span class="k">:</span> <span class="kt">PartialFunction</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">p</span><span class="k">:</span> <span class="kt">Int</span> <span class="kt">if</span> <span class="kt">p</span> <span class="kt">&gt;=</span> <span class="err">0</span> <span class="o">=&gt;</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="o">(</span><span class="n">p</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// sqrt throws MatchErrors for negative values. safeSqrt, on the other hand, returns None.</span>
</span><span class='line'><span class="k">val</span> <span class="n">safeSqrt</span> <span class="k">=</span> <span class="n">sqrt</span><span class="o">.</span><span class="n">lift</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Some(2.0)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">safeSqrt</span><span class="o">(</span><span class="mi">4</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;None&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">safeSqrt</span><span class="o">(-</span><span class="mi">4</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// unlift does the opposite operation:</span>
</span><span class='line'><span class="k">val</span> <span class="n">unsafeSqrt</span> <span class="k">=</span> <span class="nc">Function</span><span class="o">.</span><span class="n">unlift</span><span class="o">(</span><span class="n">safeSqrt</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;2.0&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">unsafeSqrt</span><span class="o">(</span><span class="mi">4</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Throws a MatchError</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">unsafeSqrt</span><span class="o">(-</span><span class="mi">4</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interacting with JSON in Scala]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/07/17/interacting-with-json-in-scala/"/>
    <updated>2013-07-17T21:58:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/07/17/interacting-with-json-in-scala</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>Many of our current projects require me to work with <a href="http://www.json.org">JSON</a>, either as input or as output, for
punctual scripts. If I&#8217;m to phase Groovy out in favour of Scala, this is something I need to be able to do comfortably.</p>

<p>After looking at a few libraries, the one I found I liked the most was <a href="http://argonaut.io">Argonaut</a>.</p>

<!-- more -->


<h2>Why not lift-json?</h2>

<p>The general consensus seems to be that
<a href="https://github.com/lift/lift/tree/master/framework/lift-base/lift-json/">lift-json</a> is the best Scala JSON library
out there. It&#8217;s full of nice features, reportedly fast, has an expressive DSL&#8230;</p>

<p>So why not use that?</p>

<p>Well, I&#8217;ve been playing with it, trying to convince myself that it was as good as people said, but I&#8217;ve come to the
conclusion that it&#8217;s just not for me - it&#8217;s either not very stable or not coherent enough for my tastes.</p>

<p>Here&#8217;s an example of the things that have driven me away from lift-json:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">net.liftweb.json.JsonDSL._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">net.liftweb.json._</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">formats</span> <span class="k">=</span> <span class="nc">DefaultFormats</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Extracts all values of &quot;count&quot; found in the specified JSON object, returns them as a list of ints.</span>
</span><span class='line'><span class="c1">// Note that we *must* go through a call to children which, while understandable, is just noise to the reader.</span>
</span><span class='line'><span class="k">def</span> <span class="n">extractCounts</span><span class="o">(</span><span class="n">obj</span><span class="k">:</span> <span class="kt">JValue</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="n">obj</span> <span class="o">\\</span> <span class="s">&quot;count&quot;</span><span class="o">).</span><span class="n">children</span><span class="o">.</span><span class="n">extract</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We&#39;re expecting List(10) but getting List()</span>
</span><span class='line'><span class="k">val</span> <span class="n">v1</span> <span class="k">=</span> <span class="o">(</span><span class="s">&quot;id&quot;</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">~</span> <span class="o">(</span><span class="s">&quot;count&quot;</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">extractCounts</span><span class="o">(</span><span class="n">v1</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We&#39;re expecting and getting List()</span>
</span><span class='line'><span class="k">val</span> <span class="n">v2</span> <span class="k">=</span> <span class="o">(</span><span class="s">&quot;id&quot;</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">~</span> <span class="o">(</span><span class="s">&quot;other&quot;</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">extractCounts</span><span class="o">(</span><span class="n">v2</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We&#39;re expecting and getting List(11, 12)</span>
</span><span class='line'><span class="k">val</span> <span class="n">v3</span> <span class="k">=</span> <span class="o">(</span><span class="s">&quot;id&quot;</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="o">)</span> <span class="o">~</span> <span class="o">(</span><span class="s">&quot;count&quot;</span> <span class="o">-&gt;</span> <span class="mi">11</span><span class="o">)</span> <span class="o">~</span>
</span><span class='line'>              <span class="o">(</span><span class="s">&quot;nested&quot;</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="s">&quot;id&quot;</span> <span class="o">-&gt;</span> <span class="mi">4</span><span class="o">)</span> <span class="o">~</span> <span class="o">(</span><span class="s">&quot;count&quot;</span> <span class="o">-&gt;</span> <span class="mi">12</span><span class="o">))</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">extractCounts</span><span class="o">(</span><span class="n">v3</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We&#39;re expecting List(11) but getting List()</span>
</span><span class='line'><span class="k">val</span> <span class="n">v4</span> <span class="k">=</span> <span class="o">(</span><span class="s">&quot;id&quot;</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="o">)</span> <span class="o">~</span> <span class="o">(</span><span class="s">&quot;count&quot;</span> <span class="o">-&gt;</span> <span class="mi">11</span><span class="o">)</span> <span class="o">~</span>
</span><span class='line'>            <span class="o">(</span><span class="s">&quot;nested&quot;</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="s">&quot;id&quot;</span> <span class="o">-&gt;</span> <span class="mi">4</span><span class="o">)</span> <span class="o">~</span> <span class="o">(</span><span class="s">&quot;other&quot;</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="o">))</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">extractCounts</span><span class="o">(</span><span class="n">v4</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We&#39;re expecting List(12) but getting List()</span>
</span><span class='line'><span class="k">val</span> <span class="n">v5</span> <span class="k">=</span> <span class="o">(</span><span class="s">&quot;id&quot;</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="o">)</span> <span class="o">~</span> <span class="o">(</span><span class="s">&quot;other&quot;</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="o">)</span> <span class="o">~</span>
</span><span class='line'>            <span class="o">(</span><span class="s">&quot;nested&quot;</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="s">&quot;id&quot;</span> <span class="o">-&gt;</span> <span class="mi">4</span><span class="o">)</span> <span class="o">~</span> <span class="o">(</span><span class="s">&quot;count&quot;</span> <span class="o">-&gt;</span> <span class="mi">12</span><span class="o">))</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">extractCounts</span><span class="o">(</span><span class="n">v5</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I don&#8217;t always have full control over the JSON I consume, and if lift-json cannot be trusted to behave coherently on
different (acceptable) variations of a format, I cannot trust it to work in the real world.</p>

<h2>Argonaut</h2>

<p>Argonaut describes itself as a purely functional JSON parser and library. I&#8217;ve played with it for a while and have
been able to do everything I wanted - which is more than I can say for other JSON libraries. It took me a while, some
things were hard to get my head around, but if I want to be honest, it&#8217;s probably got more to do with my inability
to think in functional terms rather than design flaws in Argonaut.</p>

<p>Also, a JSON library called Argonaut. It&#8217;s too cute not to fall in love with it.</p>

<p>Importing Argonaut in <code>sbt</code> is done through:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="s">&quot;io.argonaut&quot;</span> <span class="o">%%</span> <span class="s">&quot;argonaut&quot;</span> <span class="o">%</span> <span class="s">&quot;6.0-RC3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Basic operations</h2>

<p>Creating a JSON object from scratch is done fairly easily through <code>argonaut.Json.apply</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">argonaut._</span><span class="o">,</span> <span class="nc">Argonaut</span><span class="o">.</span><span class="k">_</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Clear and both easy to read and write.</span>
</span><span class='line'><span class="c1">// The same result can be obtained through the cons-like construct -&gt;:, but I prefer this style.</span>
</span><span class='line'><span class="k">val</span> <span class="n">json</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">(</span><span class="s">&quot;id&quot;</span>     <span class="o">:=</span> <span class="mi">1</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;name&quot;</span>   <span class="o">:=</span> <span class="s">&quot;John Smith&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;age&quot;</span>    <span class="o">:=</span> <span class="mi">34</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;nested&quot;</span> <span class="o">:=</span> <span class="nc">Json</span><span class="o">(</span>
</span><span class='line'>                  <span class="s">&quot;id&quot;</span> <span class="o">:=</span> <span class="mi">2</span><span class="o">,</span>
</span><span class='line'>                  <span class="s">&quot;name&quot;</span> <span class="o">:=</span> <span class="s">&quot;Jane Smith&quot;</span><span class="o">,</span>
</span><span class='line'>                  <span class="s">&quot;age&quot;</span> <span class="o">:=</span> <span class="mi">31</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Retrieving field values takes a bit of getting used to, but is very powerful and, more importantly, safe. Everything
is done through instances of <code>Option</code>, with helpers methods for standard default values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Retrieves the object&#39;s id field, or 0 if it doesn&#39;t exist or isn&#39;t an int.</span>
</span><span class='line'><span class="c1">// fieldOrZero checks for the existence of the requested field, numberOr attempts to interpret it as a number.</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">json</span> <span class="n">fieldOrZero</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">)</span> <span class="n">numberOr</span><span class="o">(</span><span class="mi">0</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// More convoluted example, with detailled messages for all cases:</span>
</span><span class='line'><span class="n">json</span> <span class="n">field</span> <span class="s">&quot;id&quot;</span> <span class="n">map</span> <span class="o">{</span><span class="k">_</span><span class="o">.</span><span class="n">number</span> <span class="n">map</span> <span class="o">{</span><span class="n">i</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;id is an int of value %s&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">i</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span> <span class="n">getOrElse</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;id is set, but not to a number&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span> <span class="n">getOrElse</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;id is not set&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// As usual, for comprehensions make this both more readable and usable.</span>
</span><span class='line'><span class="k">val</span> <span class="n">id</span> <span class="k">=</span> <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="n">json</span><span class="o">.</span><span class="n">field</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">);</span> <span class="n">j</span> <span class="k">&lt;-</span> <span class="n">i</span><span class="o">.</span><span class="n">number</span><span class="o">)</span> <span class="k">yield</span> <span class="n">j</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">id</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="mi">0</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>All <code>Json</code> instances are immutable: modifying a field&#8217;s value is done by creating a clone of the initial instance with
the desired modification. The documentation didn&#8217;t make this immediately obvious to me, but it&#8217;s simply done by
overwriting the field through the <code>-&gt;:</code> construct (or its option-based variant, <code>-&gt;?:</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Creates a clone of the initial object with an id field of 3.</span>
</span><span class='line'><span class="k">val</span> <span class="n">json2</span> <span class="k">=</span> <span class="o">(</span><span class="s">&quot;id&quot;</span> <span class="o">:=</span> <span class="mi">3</span><span class="o">)</span> <span class="o">-&gt;:</span> <span class="n">json</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Instead of setting id to an arbitrary value, we increment it by 1, and use a default value of 0 if it does not</span>
</span><span class='line'><span class="c1">// exist. The beauty of this is that it cannot fail:</span>
</span><span class='line'><span class="c1">// - if id doesn&#39;t exist, it defaults to 0 through fieldOrZero</span>
</span><span class='line'><span class="c1">// - if it exists but isn&#39;t an int, withNumber will ignore the entire call and json3 will be strictly equal to json</span>
</span><span class='line'><span class="c1">// - otherwise, we&#39;ll get what we asked for.</span>
</span><span class='line'><span class="k">val</span> <span class="n">json3</span> <span class="k">=</span> <span class="o">(</span><span class="s">&quot;id&quot;</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">json</span> <span class="n">fieldOrZero</span> <span class="s">&quot;id&quot;</span> <span class="n">withNumber</span> <span class="o">{</span><span class="k">_</span> <span class="o">+</span> <span class="mi">1</span><span class="o">}))</span> <span class="o">-&gt;:</span> <span class="n">json</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Modifying fields for nested objects is somewhat more convoluted.</span>
</span><span class='line'><span class="c1">// First, we modify the nested object. Note that nested is an Option[Json], None if the &#39;nested&#39; field does not exist.</span>
</span><span class='line'><span class="k">val</span> <span class="n">nested</span> <span class="k">=</span> <span class="n">json</span> <span class="n">field</span> <span class="s">&quot;nested&quot;</span> <span class="n">map</span> <span class="o">{(</span><span class="s">&quot;id&quot;</span> <span class="o">:=</span> <span class="mi">4</span><span class="o">)</span> <span class="o">-&gt;:</span> <span class="k">_</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Then override the previous value of &#39;nested&#39; - if and only if nested isn&#39;t None (that&#39;s the meaning of :=? and -&gt;?:).</span>
</span><span class='line'><span class="k">val</span> <span class="n">json4</span>  <span class="k">=</span> <span class="o">(</span><span class="s">&quot;nested&quot;</span> <span class="o">:=?</span> <span class="n">nested</span><span class="o">)</span> <span class="o">-&gt;?:</span> <span class="n">json</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reading / Writing</h2>

<p>As far as I&#8217;m concerned, this is where Argonaut is at its weakest: reading and writing isn&#8217;t stream based. You can
only read from / write to strings. An extreme example of why this is bad is a humongous, sevel gigabytes large file
containing mostly whitespace and a tiny JSON object at the end. A stream based library would skip the whitespace and
only load the resulting JSON object, where Argonaut will load the entire file in memory.</p>

<p>This is probably not an issue in the majority of cases, but is definitely suboptimal. My guess is that the designers of
Argonaut are waiting for Scala&#8217;s IO libraries to settle down (<code>scala.io.Source</code>, for example, has a horrible reputation
and seems on the cusp of a major overhaul). Hopefully this all gets sorted in the future.</p>

<p>Due to its lack of stream support, Argonaut reading and writing primitives are dead simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Pretty prints json with 4 spaces for indentation.</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">json</span><span class="o">.</span><span class="n">spaces4</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints a compact version of json. I feel this method should be called nospace - since there isn&#39;t even a single</span>
</span><span class='line'><span class="c1">// space, why should it be plural? - but I&#39;m no native speaker.</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">json</span><span class="o">.</span><span class="n">nospaces</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">source</span> <span class="k">=</span> <span class="s">&quot;&quot;&quot;{&quot;id&quot;: 1, &quot;name&quot; : &quot;John Smith&quot;, &quot;age&quot; : 34}&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// There are other parsing methods, but they rely on Scalaz datatypes that I have no familiarity with and don&#39;t plan</span>
</span><span class='line'><span class="c1">// on learning just now.</span>
</span><span class='line'><span class="nc">Parse</span><span class="o">.</span><span class="n">parseOption</span><span class="o">(</span><span class="n">source</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span><span class="n">j</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Parsed into %s&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">j</span><span class="o">.</span><span class="n">spaces4</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span> <span class="n">getOrElse</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;An error occurred&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB with Scala]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/07/15/mongodb-with-scala/"/>
    <updated>2013-07-15T21:52:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/07/15/mongodb-with-scala</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>I finally know enough Scala to start incorporating it in my day-to-day job. Before I can actually become productive,
however, I need to work out how to do the following, which are prerequisites to a large chunk of my recent weekly tasks:</p>

<ul>
<li>read / write CSV files (<a href="https://github.com/nrinaudo/scala-csv">sorted</a>)</li>
<li>interact with <a href="http://www.mongodb.org">MongoDB</a></li>
<li>read / write XML files</li>
<li>read / write JSON files</li>
</ul>


<p>Today&#8217;s post is about integrating with MongoDB.</p>

<!-- more -->


<h2>Library</h2>

<p>This is achieved through <a href="http://mongodb.github.io/casbah/">Casbah</a>, the official Scala MongoDB driver. Casbah builds
are available in standard Maven repositories, which means that it should be rather trivial to integrate with most
modern build tools. I&#8217;ve been working with <a href="http://www.scala-sbt.org">sbt</a> recently, which makes it as easy as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Note the %% symbol: it lets sbt look for a casbah built that matches the target version of Scala by appending it</span>
</span><span class='line'><span class="c1">// to artifact names.</span>
</span><span class='line'><span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="s">&quot;org.mongodb&quot;</span> <span class="o">%%</span> <span class="s">&quot;casbah&quot;</span> <span class="o">%</span> <span class="s">&quot;2.6.2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Casbah depends on <a href="http://www.slf4j.org">SLF4j</a>, which is brilliant but means that you need a valid SLF4j output
connector in the classpath on pain of ugly warnings at runtime. For testing purposes, I always use their no-op
connector:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Note the absence of %% symbol: slf4j is not scala specific and has no version number in its artifact names.</span>
</span><span class='line'><span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="s">&quot;org.slf4j&quot;</span> <span class="o">%</span> <span class="s">&quot;slf4j-nop&quot;</span> <span class="o">%</span> <span class="s">&quot;1.7.5&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Querying MongoDB</h2>

<p>At its most basic, querying MongoDB is very reminiscent of the official Java driver:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Connects to collection MyCollection of database MyDatabase on the default port.</span>
</span><span class='line'><span class="k">val</span> <span class="n">col</span> <span class="k">=</span> <span class="nc">MongoClient</span><span class="o">()(</span><span class="s">&quot;MyDatabase&quot;</span><span class="o">)(</span><span class="s">&quot;MyCollection&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Inserts an object in the collection.</span>
</span><span class='line'><span class="n">col</span><span class="o">.</span><span class="n">insert</span><span class="o">(</span><span class="nc">MongoDBObject</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">,</span> <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;John Smith&quot;</span><span class="o">,</span> <span class="s">&quot;age&quot;</span> <span class="o">-&gt;</span> <span class="mi">34</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Finds all documents with an _id field of 1</span>
</span><span class='line'><span class="n">col</span><span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="nc">MongoDBObject</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">))</span> <span class="n">foreach</span> <span class="o">{</span><span class="n">o</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">o</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">))}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Sets the &quot;age&quot; field of all documents with an _id field of 1 to 35.</span>
</span><span class='line'><span class="n">col</span><span class="o">.</span><span class="n">update</span><span class="o">(</span><span class="nc">MongoDBObject</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">),</span> <span class="nc">MongoDBObject</span><span class="o">(</span><span class="s">&quot;$set&quot;</span> <span class="o">-&gt;</span> <span class="nc">MongoDBObject</span><span class="o">(</span><span class="s">&quot;age&quot;</span> <span class="o">-&gt;</span> <span class="mi">35</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Deletes all documents with an _id field of 1.</span>
</span><span class='line'><span class="n">col</span><span class="o">.</span><span class="n">remove</span><span class="o">(</span><span class="nc">MongoDBObject</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Casbah, however, has a clever <a href="http://mongodb.github.io/casbah/guide/query_dsl.html">DSL</a> to make these verbose calls
much more pleasant to read and closer to standard MongoDB syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// This is strictly equivalent to col.find(MongoDBObject(&quot;_id&quot; -&gt; 1)).</span>
</span><span class='line'><span class="n">col</span><span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="nc">$eq</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This can alternatively be done with findOneByID (which is a bit of a pain with int ids, as you need to use</span>
</span><span class='line'><span class="c1">// type ascription).</span>
</span><span class='line'><span class="n">col</span><span class="o">.</span><span class="n">findOneByID</span><span class="o">(</span><span class="mi">1</span><span class="k">:</span> <span class="kt">java.lang.Integer</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Multiple filters can be chained through the ++ operator:</span>
</span><span class='line'><span class="n">col</span><span class="o">.</span><span class="n">find</span><span class="o">((</span><span class="s">&quot;_id&quot;</span> <span class="nc">$eq</span> <span class="mi">1</span><span class="o">)</span> <span class="o">++</span> <span class="o">(</span><span class="s">&quot;age&quot;</span> <span class="nc">$eq</span> <span class="mi">34</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The same is true for update criterias:</span>
</span><span class='line'><span class="n">col</span><span class="o">.</span><span class="n">update</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="nc">$eq</span> <span class="mi">1</span><span class="o">,</span> <span class="nc">$set</span><span class="o">(</span><span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;Jane Smith&quot;</span><span class="o">)</span> <span class="o">++</span> <span class="nc">$inc</span><span class="o">(</span><span class="s">&quot;age&quot;</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Retrieving field values</h2>

<p>Retrieving field values is slightly more verbose, but very flexible:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">col</span><span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="nc">$eq</span> <span class="mi">1</span><span class="o">)</span> <span class="n">foreach</span> <span class="o">{</span><span class="n">o</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="c1">// Unsafe: if the requested field doesn&#39;t exist, an exception is thrown.</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="n">as</span><span class="o">[</span><span class="kt">Int</span><span class="o">](</span><span class="s">&quot;age&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Safe: returns an Option.</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">Int</span><span class="o">](</span><span class="s">&quot;age&quot;</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Array fields are handled exactly as you&#8217;d expect through the <code>MongoDBList</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">col</span><span class="o">.</span><span class="n">insert</span><span class="o">(</span><span class="nc">MongoDBObject</span><span class="o">(</span><span class="s">&quot;_id&quot;</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">,</span> <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;John Smith&quot;</span><span class="o">,</span> <span class="s">&quot;age&quot;</span> <span class="o">-&gt;</span> <span class="mi">34</span><span class="o">,</span> <span class="s">&quot;numbers&quot;</span> <span class="o">-&gt;</span> <span class="nc">MongoDBList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Both findOneByID and getAs return an Option, which explains the calls to map.</span>
</span><span class='line'><span class="n">col</span><span class="o">.</span><span class="n">findOneByID</span><span class="o">(</span><span class="mi">1</span><span class="k">:</span> <span class="kt">java.lang.Integer</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span><span class="n">o</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">o</span><span class="o">.</span><span class="n">getAs</span><span class="o">[</span><span class="kt">MongoDBList</span><span class="o">](</span><span class="s">&quot;numbers&quot;</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span><span class="n">n</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="c1">// n behaves as a standard Seq[Any].</span>
</span><span class='line'>    <span class="n">n</span> <span class="n">foreach</span> <span class="n">println</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing equals in Scala]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/06/20/implementing-equals-in-scala/"/>
    <updated>2013-06-20T12:40:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/06/20/implementing-equals-in-scala</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>Writing proper <code>equals</code> methods in Java is
<a href="http://stackoverflow.com/questions/27581/overriding-equals-and-hashcode-in-java">a bit of a pain</a>. Turns out, Scala
is slightly better but still somewhat cumbersome. It&#8217;s mostly a matter of remembering all the rules, which this post
should help with.</p>

<!-- more -->


<h2>Basic implementation</h2>

<p>Pattern matching makes a basic implementation of <code>equals</code> rather easy to read and write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Point2d</span><span class="o">(</span><span class="k">val</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="k">val</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">equals</span><span class="o">(</span><span class="n">other</span><span class="k">:</span> <span class="kt">Any</span><span class="o">)</span> <span class="k">=</span> <span class="n">other</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Any instance of Point2d with the same x and y as the current instance is equal to it.</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">o</span><span class="k">:</span> <span class="kt">Point2d</span> <span class="o">=&gt;</span> <span class="n">o</span><span class="o">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">o</span><span class="o">.</span><span class="n">y</span> <span class="o">==</span> <span class="n">y</span>
</span><span class='line'>    <span class="c1">// Anything else isn&#39;t.</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span>          <span class="k">=&gt;</span> <span class="kc">false</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>hashCode</h2>

<p>Exactly as in Java, overriding <code>equals</code> should always be accompanied by an equivalent implementation of <code>hashCode</code>.</p>

<p>Nothing tricky there, although the convention is slightly different than in Java: Scala uses the 41 magic number where
Java uses 31.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Point2d</span><span class="o">(</span><span class="k">val</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="k">val</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">hashCode</span><span class="o">()</span> <span class="k">=</span> <span class="mi">41</span> <span class="o">*</span> <span class="o">(</span><span class="mi">41</span> <span class="o">+</span> <span class="n">x</span><span class="o">)</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">equals</span><span class="o">(</span><span class="n">other</span><span class="k">:</span> <span class="kt">Any</span><span class="o">)</span> <span class="k">=</span> <span class="n">other</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">o</span><span class="k">:</span> <span class="kt">Point2d</span> <span class="o">=&gt;</span> <span class="n">o</span><span class="o">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">o</span><span class="o">.</span><span class="n">y</span> <span class="o">==</span> <span class="n">y</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span>          <span class="k">=&gt;</span> <span class="kc">false</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>canEqual</h2>

<p>This is where Scala becomes more cumbersome (yet more powerful) than Java.</p>

<p>A proper <code>equals</code> method should be reflexive, which means that <code>x == y</code> implies that <code>y == x</code>. Common Java wisdom has
it that to enforce this, instances of a subclass cannot be equal to instances of their parent class.</p>

<p>Say, for example, that we created a <code>Point3d</code> class with a <code>z</code> coordinate. Instances of <code>Point3d</code> cannot be equal to
instances of <code>Point2d</code>, which means that instances of <code>Point2d</code> cannot be equal to instances of <code>Point3d</code>.</p>

<p>This restriction can be a bit too strict: sometimes, a class subclasses another without changing the meaning of
instance equality. In order to deal with this cases, Scala uses the <code>Equals</code> trait:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Point2d</span><span class="o">(</span><span class="k">val</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="k">val</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Equals</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">hashCode</span><span class="o">()</span> <span class="k">=</span> <span class="mi">41</span> <span class="o">*</span> <span class="o">(</span><span class="mi">41</span> <span class="o">+</span> <span class="n">x</span><span class="o">)</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Anything that is an instance of `Point2d` can be equal to it.</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">canEqual</span><span class="o">(</span><span class="n">that</span><span class="k">:</span> <span class="kt">Any</span><span class="o">)</span> <span class="k">=</span> <span class="n">that</span><span class="o">.</span><span class="n">isInstanceOf</span><span class="o">[</span><span class="kt">Point2d</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">equals</span><span class="o">(</span><span class="n">other</span><span class="k">:</span> <span class="kt">Any</span><span class="o">)</span> <span class="k">=</span> <span class="n">other</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Note the call to canEqual which makes sure that other is ok to be compared with this.</span>
</span><span class='line'>    <span class="c1">// In our example, other would be an instance of Point3d and would refuse the comparison.</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">o</span><span class="k">:</span> <span class="kt">Point2d</span> <span class="o">=&gt;</span> <span class="o">(</span><span class="n">o</span> <span class="n">canEqual</span> <span class="k">this</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">o</span><span class="o">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">o</span><span class="o">.</span><span class="n">y</span> <span class="o">==</span> <span class="n">y</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span>          <span class="k">=&gt;</span> <span class="kc">false</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CustomPoint</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Point2d</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// custom code.</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// CustomPoint doesn&#39;t override canEqual, which means that it&#39;s perfectly possible for an instance of Point2d and</span>
</span><span class='line'><span class="c1">// CustomPoint to be equal. And Indeed:</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints true</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">Point2d</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="o">==</span> <span class="k">new</span> <span class="nc">CustomPoint</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">))</span>
</span><span class='line'><span class="c1">// Prints true</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">CustomPoint</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="o">==</span> <span class="k">new</span> <span class="nc">Point2d</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Point3d adds a new field, which makes it impossible for an instance of Point2d and Point3d to be equal.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Point3d</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="k">val</span> <span class="n">z</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Point2d</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">hashCode</span><span class="o">()</span> <span class="k">=</span> <span class="mi">41</span> <span class="o">*</span> <span class="o">(</span><span class="mi">41</span> <span class="o">+</span> <span class="k">super</span><span class="o">.</span><span class="n">hashCode</span><span class="o">)</span> <span class="o">+</span> <span class="n">z</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// This will cause the equals method of Point2d to return false.</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">canEqual</span><span class="o">(</span><span class="n">that</span><span class="k">:</span> <span class="kt">Any</span><span class="o">)</span> <span class="k">=</span> <span class="n">that</span><span class="o">.</span><span class="n">isInstanceOf</span><span class="o">[</span><span class="kt">Point3d</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">equals</span><span class="o">(</span><span class="n">other</span><span class="k">:</span> <span class="kt">Any</span><span class="o">)</span> <span class="k">=</span> <span class="n">other</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">o</span><span class="k">:</span><span class="kt">Point3d</span> <span class="o">=&gt;</span> <span class="o">(</span><span class="n">o</span> <span class="n">canEqual</span> <span class="k">this</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">z</span> <span class="o">==</span> <span class="n">o</span><span class="o">.</span><span class="n">z</span> <span class="o">&amp;&amp;</span> <span class="k">super</span><span class="o">.</span><span class="n">equals</span><span class="o">(</span><span class="n">o</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span>         <span class="k">=&gt;</span> <span class="kc">false</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Point3d overrides canEqual, which makes it impossible for it to be equal to instances of Point2d. And indeed:</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints false</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">Point2d</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="o">==</span> <span class="k">new</span> <span class="nc">Point3d</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">))</span>
</span><span class='line'><span class="c1">// Prints false</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">Point3d</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span> <span class="o">==</span> <span class="k">new</span> <span class="nc">Point2d</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Miscellaneous</h2>

<p>There are a few other things to keep in mind when implementing <code>equals</code>. I won&#8217;t dwell on them though, they&#8217;re exactly
the same as in Java:</p>

<ul>
<li>avoid using mutable fields in <code>equals</code> and <code>hashCode</code>.</li>
<li>if <code>a == b</code>, then <code>a.hashCode == b.hashCode</code> (but the opposite doesn&#8217;t need to, and often cannot, be true).</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Timer Actor]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/06/10/timer-actor/"/>
    <updated>2013-06-10T11:49:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/06/10/timer-actor</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>While attempting to work with <a href="http://www.scala-lang.org/api/current/index.html#scala.actors.Actor">Scala Actors</a>, I
discovered that there wasn&#8217;t a simple timer implementation (or at least that I could not find it).</p>

<p>After tinkering a bit, this is what I came up with.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.actors._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.actors.Actor._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.actors.scheduler.DaemonScheduler</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Simple timer that will send Timer.WakeUp to the target actor every timeout milliseconds.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Timer</span><span class="o">(</span><span class="k">val</span> <span class="n">timeout</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="k">val</span> <span class="n">dest</span><span class="k">:</span> <span class="kt">Actor</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">Timer.WakeUp</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Might as well make it into a daemon. This probably doesn&#39;t serve much of a purpose: this implementation is</span>
</span><span class='line'>  <span class="c1">// configured to die as soon as its target dies anyway.</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">scheduler</span> <span class="k">=</span> <span class="nc">DaemonScheduler</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">act</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Configures the timer to die as soon as its destination does.</span>
</span><span class='line'>    <span class="n">link</span><span class="o">(</span><span class="n">dest</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Somewhat arbitrary: I want the destination actor to be notified as soon as the timer is scheduled.</span>
</span><span class='line'>    <span class="c1">// A more flexible version would accept both a period and a delay before starting.</span>
</span><span class='line'>    <span class="n">dest</span> <span class="o">!</span> <span class="nc">WakeUp</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Note that it&#39;s crucial not to listen to any other message here: each handled message will reset the timer and</span>
</span><span class='line'>    <span class="c1">// break the periodicity.</span>
</span><span class='line'>    <span class="n">loop</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">reactWithin</span><span class="o">(</span><span class="n">timeout</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nc">TIMEOUT</span> <span class="k">=&gt;</span> <span class="n">dest</span> <span class="o">!</span> <span class="nc">WakeUp</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Timer</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Message sent to target actors to wake them up.</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">WakeUp</span> <span class="k">=</span> <span class="-Symbol">&#39;WakeUp</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Convenience method to create and start a timer in a single call.</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">timeout</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">dest</span><span class="k">:</span> <span class="kt">Actor</span><span class="o">)</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Timer</span><span class="o">(</span><span class="n">timeout</span><span class="o">,</span> <span class="n">dest</span><span class="o">).</span><span class="n">start</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Test code: starts an actor and prints the number of milliseconds since it&#39;s been started every time it&#39;s woken up.</span>
</span><span class='line'><span class="nc">Timer</span><span class="o">(</span><span class="mi">1000</span><span class="o">,</span> <span class="n">actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">time</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span>
</span><span class='line'>  <span class="n">loop</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">react</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Timer</span><span class="o">.</span><span class="nc">WakeUp</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Woken up at %d&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span> <span class="o">-</span> <span class="n">time</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Default values in Bash Scripting]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/06/04/default-values-in-bash-scripting/"/>
    <updated>2013-06-04T09:47:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/06/04/default-values-in-bash-scripting</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>I regularly have to write small bash scripts to wrap the various tools I create and have to run in batches. Bash
scripting is a nightmare to me - almost as bad as using <code>tar</code> without looking at the help - and I always stumble on
the same problems.</p>

<p>Not today, though. Today, I spent 15 minutes looking for the syntax of default values for shell variables for the last
time.</p>

<!-- more -->


<p>The syntax is, to my untrained eyes, obscure and as unhelpful as possible, but this is how it works:</p>

<figure class='code'><figcaption><span>script.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/bash</span>
</span><span class='line'><span class="nv">HOST</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>: <span class="k">${</span><span class="nv">HOST</span><span class="p">:=</span><span class="s2">&quot;localhost&quot;</span><span class="k">}</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$HOST</span>
</span></code></pre></td></tr></table></div></figure>


<p>Executing <code>script.sh</code> then yields:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nicolasrinaudo:~/scripts ./script.sh 212.128.0.1
</span><span class='line'>212.128.0.1
</span><span class='line'>nicolasrinaudo:~/scripts ./script.sh
</span><span class='line'>localhost
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Array-like objects in Scala]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/05/29/array-like-objects-in-scala/"/>
    <updated>2013-05-29T19:31:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/05/29/array-like-objects-in-scala</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>I finally decided to look at the documentation and understand how to write objects that behave &#8220;like arrays&#8221; in that
they support calls to <code>o(index)</code> and <code>o(index) = value</code></p>

<!-- more -->


<p>It&#8217;s actually surprisingly simple: any Scala class can be made to behave that way by implementing the <code>apply</code> and
<code>update</code> methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Demo</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">update</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">v</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Setting index %d to &#39;%s&#39;&quot;</span> <span class="n">format</span> <span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">v</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Getting index %s&quot;</span> <span class="n">format</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>    <span class="mi">0</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">a</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Demo</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Setting index 0 to &#39;zero&#39;&#39;</span>
</span><span class='line'><span class="n">a</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;zero&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Getting index 0&#39;</span>
</span><span class='line'><span class="n">a</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring XML documents with Scala]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/05/26/exploring-xml-documents-with-scala/"/>
    <updated>2013-05-26T21:58:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/05/26/exploring-xml-documents-with-scala</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>After I worked out how to <a href="http://nrinaudo.github.io/blog/2013/05/24/bridging-cyberneko-and-scala/">load HTML</a> with Scala, I had to figure out
how to explore the resulting documents. It&#8217;s rather straightfroward in
<a href="http://nrinaudo.github.io/blog/2013/04/09/using-gpath-with-xmlslurper/">Groovy</a>, but it turns out to be somewhat less pleasant in Scala.</p>

<!-- more -->


<h2>Element selectors</h2>

<p>Finding a specific element, or set of elements, is nicely implemented: it&#8217;s both easy to read and to write, even if
nothing too fancy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.xml._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">xml</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;test.html&quot;</span><span class="o">&gt;</span><span class="nc">Test</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;test2.html&quot;</span><span class="o">&gt;</span><span class="nc">Test</span> <span class="mi">2</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="n">body</span><span class="o">&gt;&lt;/</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// `\` returns a sequence containing all elements whose name match the right operand and are direct descendants of the</span>
</span><span class='line'><span class="c1">// left operand.</span>
</span><span class='line'><span class="c1">// Prints:</span>
</span><span class='line'><span class="c1">// &lt;div&gt;&lt;a href=&quot;test.html&quot;&gt;Test&lt;/a&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="c1">// &lt;div&gt;&lt;a href=&quot;test2.html&quot;&gt;Test 2&lt;/a&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="n">xml</span> <span class="o">\</span> <span class="s">&quot;body&quot;</span> <span class="o">\</span> <span class="s">&quot;div&quot;</span> <span class="n">foreach</span> <span class="n">println</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// `\\` returns a sequence containing all elements whose name match the right operand, regardless of their depth.</span>
</span><span class='line'><span class="c1">// Prints:</span>
</span><span class='line'><span class="c1">// &lt;a href=&quot;test.html&quot;&gt;Test&lt;/a&gt;</span>
</span><span class='line'><span class="c1">// &lt;a href=&quot;test2.html&quot;&gt;Test 2&lt;/a&gt;</span>
</span><span class='line'><span class="n">xml</span> <span class="o">\\</span> <span class="s">&quot;a&quot;</span> <span class="n">foreach</span> <span class="n">println</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>\</code> and <code>\\</code> selectors return sequences: you can call <code>filter</code>, <code>map</code>, <code>foreach</code>&#8230; on their results.</p>

<h2>Attribute selectors</h2>

<p>Selecting an attribute appears simple at first. According to the documentation, you can simply use <code>@name</code> with the
standard <code>\</code> and <code>\\</code> selectors, which sounds brilliant until you realise it doesn&#8217;t actually work as advertised.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.xml._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">xml</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;test.html&quot;</span><span class="o">&gt;</span><span class="nc">Test</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;test2.html&quot;</span><span class="o">&gt;</span><span class="nc">Test</span> <span class="mi">2</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="n">body</span><span class="o">&gt;&lt;/</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This *should* match and print the href attribute of all a elements.</span>
</span><span class='line'><span class="c1">// It doesn&#39;t actually work, though, and doesn&#39;t print anything.</span>
</span><span class='line'><span class="n">xml</span> <span class="o">\\</span> <span class="s">&quot;a&quot;</span> <span class="o">\</span> <span class="s">&quot;@href&quot;</span> <span class="n">foreach</span> <span class="n">println</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This does what the previous code should do. Not terribly elegant, but gets the job done.</span>
</span><span class='line'><span class="c1">// Prints:</span>
</span><span class='line'><span class="c1">// test.html</span>
</span><span class='line'><span class="c1">// test2.html</span>
</span><span class='line'><span class="n">xml</span> <span class="o">\\</span> <span class="s">&quot;a&quot;</span> <span class="n">map</span> <span class="o">{</span><span class="k">_</span> <span class="o">\</span> <span class="s">&quot;@href&quot;</span><span class="o">}</span> <span class="n">foreach</span> <span class="n">println</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Matches and prints all href attributes, regardless of their parent element.</span>
</span><span class='line'><span class="c1">// Prints:</span>
</span><span class='line'><span class="c1">// test.html</span>
</span><span class='line'><span class="c1">// test2.html</span>
</span><span class='line'><span class="n">xml</span> <span class="o">\\</span> <span class="s">&quot;@href&quot;</span> <span class="n">foreach</span> <span class="n">println</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Filtering on attribute</h2>

<p>This is where things take a turn for the worse, as far as I&#8217;m concerned: you <em>can</em> filter on attributes, it&#8217;s just not
very pleasant at all.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.xml._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">xml</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;test.html&quot;</span><span class="o">&gt;</span><span class="nc">Test</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;test2.html&quot;</span><span class="o">&gt;</span><span class="nc">Test</span> <span class="mi">2</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;&lt;</span><span class="n">a</span><span class="o">&gt;</span><span class="nc">No</span> <span class="nc">Link</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="n">body</span><span class="o">&gt;&lt;/</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Finds all a elements whose href attribute exists.</span>
</span><span class='line'><span class="c1">// Prints:</span>
</span><span class='line'><span class="c1">// &lt;a href=&quot;test.html&quot;&gt;Test&lt;/a&gt;</span>
</span><span class='line'><span class="c1">// &lt;a href=&quot;test2.html&quot;&gt;Test 2&lt;/a&gt;</span>
</span><span class='line'><span class="n">xml</span> <span class="o">\\</span> <span class="s">&quot;a&quot;</span> <span class="n">filter</span> <span class="o">{</span><span class="n">a</span> <span class="k">=&gt;</span> <span class="o">!(</span><span class="n">a</span> <span class="o">\</span> <span class="s">&quot;@href&quot;</span><span class="o">).</span><span class="n">isEmpty</span><span class="o">}</span> <span class="n">foreach</span> <span class="n">println</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Finds all a elements whose href attribute is equal to test.html.</span>
</span><span class='line'><span class="c1">// Prints:</span>
</span><span class='line'><span class="c1">// &lt;a href=&quot;test.html&quot;&gt;Test&lt;/a&gt;</span>
</span><span class='line'><span class="n">xml</span> <span class="o">\\</span> <span class="s">&quot;a&quot;</span> <span class="n">filter</span> <span class="o">{</span><span class="k">_</span> <span class="o">\</span> <span class="s">&quot;@href&quot;</span> <span class="n">contains</span> <span class="nc">Text</span><span class="o">(</span><span class="s">&quot;test.html&quot;</span><span class="o">)}</span> <span class="n">foreach</span> <span class="n">println</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building immutable collections in Scala]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/05/26/building-immutable-collections-in-scala/"/>
    <updated>2013-05-26T16:38:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/05/26/building-immutable-collections-in-scala</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>I&#8217;m turning into a big Scala fan. I&#8217;m particularly fond of its predilection for immutable instances, which requires a
bit of brain reorganisation but make things <em>much</em> safer.</p>

<p>There are some cases, however, where generating immutable collections can be a bit of a pain - maybe the way their
content is retrieved doesn&#8217;t lend itself well to recursion, for example.</p>

<p>After some head-scratching and documentation-reading, I seem to have found the proper, clean way of dealing with these
cases: <a href="http://www.scala-lang.org/api/current/index.html#scala.collection.mutable.Builder">builders</a>.</p>

<!-- more -->


<p>A <code>Builder</code> is quite simply a mutable instance used to incrementally build an immutable collection. The following example
works with a <code>Set</code>, but it seems most (all?) collections support the same construct.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Creates a builder used to create an immutable Set[Int]</span>
</span><span class='line'><span class="k">val</span> <span class="n">builder</span> <span class="k">=</span> <span class="nc">Set</span><span class="o">.</span><span class="n">newBuilder</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Builds and retrieves the result.</span>
</span><span class='line'><span class="o">(</span><span class="mi">0</span> <span class="n">to</span> <span class="mi">5</span><span class="o">)</span> <span class="n">foreach</span> <span class="o">{</span><span class="n">builder</span> <span class="o">+=</span> <span class="k">_</span><span class="o">}</span>
</span><span class='line'><span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">result</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Set(0, 5, 1, 2, 3, 4)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">result</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;true&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="n">isInstanceOf</span><span class="o">[</span><span class="kt">collection.immutable.Set</span><span class="o">[</span><span class="kt">Int</span><span class="o">]])</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bridging CyberNeko and Scala]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/05/24/bridging-cyberneko-and-scala/"/>
    <updated>2013-05-24T22:06:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/05/24/bridging-cyberneko-and-scala</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>I just spent a few hours working out how to use my favourite HTML cleaner,
<a href="http://nekohtml.sourceforge.net">CyberNeko</a>, with Scala. Web scrapping is something that I have to do rather often and
I&#8217;d rather spare you the frustration I just went through, so here goes.</p>

<!-- more -->


<h2>The Problem</h2>

<p>What I wanted to do was to use CyberNeko to do the HTML parsing, but retrieve standard Scala XML elements in order to
use their various enhancements (<code>XPath</code>-like path analysis, for example).</p>

<p>The problem is that, in order to do that, one needs to use an instance of
<a href="http://www.scala-lang.org/api/2.11.0-M2/index.html#scala.xml.package@SAXParser=javax.xml.parsers.SAXParser">SAXParser</a>,
which CyberNeko doesn&#8217;t provide. Well, it does provide a
<a href="http://nekohtml.sourceforge.net/javadoc/org/cyberneko/html/parsers/SAXParser.html">SAXParser</a> class, but that&#8217;s a
misnomer since it&#8217;s actually an implementation of
<a href="http://docs.oracle.com/javase/6/docs/api/org/xml/sax/XMLReader.html">XMLReader</a>. Confused yet?</p>

<p>After digging through Java and Xerces&#8217; mess of factories, factory adapters, builders, parsers and readers in
order to find a one-liner, elegant way to turn CyberNeko into a proper <code>SAXParser</code>, the only conclusion I came to was
that XML handling in Java is an exercise in obfucastion and it would probably be much quicker to implement a solution
than to find the appropriate classes, if they even exist.</p>

<h2>The Solution</h2>

<p>Turns out I was right. Writing a simple wrapper class for CyberNeko is as easy as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.xml._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.xml.sax._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HtmlParser</span> <span class="k">extends</span> <span class="nc">SAXParser</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// This is actually an instance of XMLReader. One cannot help but wonder what the !@# they were thinking.</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">reader</span> <span class="k">=</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="n">cyberneko</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">parsers</span><span class="o">.</span><span class="nc">SAXParser</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// By default, CyberNeko turns all element names upper-case. I&#39;m not a big fan.</span>
</span><span class='line'>  <span class="n">reader</span><span class="o">.</span><span class="n">setProperty</span><span class="o">(</span><span class="s">&quot;http://cyberneko.org/html/properties/names/elems&quot;</span><span class="o">,</span> <span class="s">&quot;lower&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Deprecated, no need to support.</span>
</span><span class='line'>  <span class="c1">// This is going to generate warnings at compile time, but I don&#39;t see a way around it.</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">getParser</span><span class="o">()</span><span class="k">:</span> <span class="kt">org.xml.sax.Parser</span> <span class="o">=</span> <span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">getProperty</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Object</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="n">getProperty</span><span class="o">(</span><span class="n">name</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">getXMLReader</span><span class="o">()</span> <span class="k">=</span> <span class="n">reader</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">isNamespaceAware</span><span class="o">()</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">isValidating</span><span class="o">()</span> <span class="k">=</span> <span class="kc">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">setProperty</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">value</span><span class="k">:</span> <span class="kt">Object</span><span class="o">)</span> <span class="k">=</span> <span class="n">reader</span><span class="o">.</span><span class="n">setProperty</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once this is done, parsing an HTML file can be done with one of
<a href="http://www.scala-lang.org/api/2.11.0-M2/index.html#scala.xml.XML">XML</a>&#8217;s various <code>load</code> methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">html</span> <span class="k">=</span> <span class="nc">XML</span><span class="o">.</span><span class="n">withSAXParser</span><span class="o">(</span><span class="k">new</span> <span class="nc">HtmlParser</span><span class="o">()).</span><span class="n">loadFile</span><span class="o">(</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="nc">File</span><span class="o">(</span><span class="s">&quot;my/html/file.html&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">html</span> <span class="o">\\</span> <span class="s">&quot;div&quot;</span> <span class="n">foreach</span> <span class="o">{</span><span class="n">div</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">div</span><span class="o">.</span><span class="n">text</span><span class="o">)}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala's Option]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/05/13/scalas-option/"/>
    <updated>2013-05-13T16:28:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/05/13/scalas-option</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>I used Scala&#8217;s <a href="http://www.scala-lang.org/api/current/index.html#scala.Option">Option</a> for the first time today, and
found it confusing enough that I thought I&#8217;d write about it.</p>

<!-- more -->


<h2>Purpose</h2>

<p>An instance of <code>Option</code> represents an optional value. If the value is set, it&#8217;s an instance of <code>Some</code> - a value set to
10 will be equal to <code>Some(10)</code>, for example. If, on the other hand, it isn&#8217;t set, the value will be equal to <code>None</code>.</p>

<p>A typical use case is for methods that might not return a value at all - methods that would return <code>null</code> in Java. It
makes things clearer: callers don&#8217;t need to check against <code>null</code> every time, it can be considered (rightly!) to be
an illegal value.</p>

<p>Callers do, however, need to work with the <code>Option</code>.</p>

<h2>Default values</h2>

<p>One way in which <code>Option</code> is very convenient is default values through the <code>getOrElse</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Prints &#39;10&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="nc">Some</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span> <span class="n">getOrElse</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;0&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="nc">None</span> <span class="n">getOrElse</span> <span class="mi">0</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I can see this being useful for default configuration values, for example.</p>

<p>Note that you sometimes need to return another instance of <code>Option</code> rather than the wrapped value. In theses cases, the
<code>orElse</code> method is perfect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Prints &#39;Some(10)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="nc">Some</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span> <span class="n">orElse</span> <span class="nc">Some</span><span class="o">(</span><span class="mi">0</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Some(0)&#39;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="nc">None</span> <span class="n">orElse</span> <span class="nc">Some</span><span class="o">(</span><span class="mi">0</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Pattern matching</h2>

<p>Instances of <code>Option</code> are very pleasant in pattern matching:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">check</span><span class="o">(</span><span class="n">o</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span> <span class="k">=</span> <span class="n">o</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Ok: %s&quot;</span> <span class="n">format</span> <span class="n">x</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">None</span>    <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Problem&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Ok: 10&#39;</span>
</span><span class='line'><span class="n">check</span><span class="o">(</span><span class="nc">Some</span><span class="o">(</span><span class="mi">10</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &#39;Problem&#39;</span>
</span><span class='line'><span class="n">check</span><span class="o">(</span><span class="nc">None</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note, however, that this isn&#8217;t considered very idiomatic - nor is it really necessary, when you can use the
<code>fold</code> or <code>getOrElse</code> methods to achieve the same effect with much less typing.</p>

<h2>Branching</h2>

<p>The <code>getOrElse</code> method actually takes a <a href="http://nrinaudo.github.io/blog/2013/04/11/scalas-by-name-parameters/">by-name parameter</a>, which
means it can be used in a rather neat way for branching depending on whether or not the value is set:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// The function passed to map will be executed if someMethod returns a value,</span>
</span><span class='line'><span class="c1">// the one passed to getOrElse if someMethod returns None.</span>
</span><span class='line'><span class="c1">// This prints &#39;Value: 10&#39;</span>
</span><span class='line'><span class="nc">Some</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span><span class="n">v</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Value: %s&quot;</span> <span class="n">format</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span> <span class="n">getOrElse</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;No value specified&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>fold</code> method is a bit of a shortcut for this construct:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// The first argument is the function to execute if the option is None.</span>
</span><span class='line'><span class="c1">// The second one will be executed if the option is Some(v)</span>
</span><span class='line'><span class="c1">// This prints &#39;Value: 10&#39;</span>
</span><span class='line'><span class="nc">Some</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="n">fold</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;No value specified&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span> <span class="o">{</span><span class="n">v</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Value: %s&quot;</span> <span class="n">format</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Interraction with for-comprehensions</h2>

<p>Due to the way <a href="blog/2013/04/25/scalas-for-comprehension/">for-comprehensions</a> work and <code>Option</code> defines the <code>map</code> and
<code>flatMap</code> methods, it&#8217;s also possible to write some fairly terse code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// For the purpose of this example, conf&#39;s apply method returns an Option[String]</span>
</span><span class='line'><span class="c1">// containing the value of the requested configuration variable.</span>
</span><span class='line'><span class="k">val</span> <span class="n">conf</span> <span class="k">=</span> <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// uri is an Option[String]: either a Some containing the final URI, or a None if at least one of the requested</span>
</span><span class='line'><span class="c1">// configuration variables is not set.</span>
</span><span class='line'><span class="k">val</span> <span class="n">uri</span> <span class="k">=</span> <span class="k">for</span><span class="o">(</span><span class="n">proto</span> <span class="k">&lt;-</span> <span class="n">conf</span><span class="o">(</span><span class="s">&quot;protocol&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="n">host</span> <span class="k">&lt;-</span> <span class="n">conf</span><span class="o">(</span><span class="s">&quot;host&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="n">port</span> <span class="k">&lt;-</span> <span class="n">conf</span><span class="o">(</span><span class="s">&quot;port&quot;</span><span class="o">))</span> <span class="k">yield</span> <span class="s">&quot;%s://%s:%s&quot;</span> <span class="n">format</span> <span class="o">(</span><span class="n">proto</span><span class="o">,</span> <span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">uri</span><span class="o">.</span><span class="n">fold</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Failed to extract a URI&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span> <span class="o">{</span><span class="n">u</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Extracted the following URI: %s&quot;</span> <span class="n">format</span> <span class="n">u</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This felt a bit like magic to me at first, so let&#8217;s dissect it.
At compile-time, the for-comprehension is turned into the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">uri</span> <span class="k">=</span> <span class="n">conf</span><span class="o">(</span><span class="s">&quot;protocol&quot;</span><span class="o">).</span><span class="n">flatMap</span> <span class="o">{</span><span class="n">proto</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">(</span><span class="s">&quot;host&quot;</span><span class="o">).</span><span class="n">flatMap</span> <span class="o">{</span><span class="n">host</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">conf</span><span class="o">(</span><span class="s">&quot;port&quot;</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span><span class="n">port</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="s">&quot;%s://%s:%s&quot;</span> <span class="n">format</span> <span class="o">(</span><span class="n">proto</span><span class="o">,</span> <span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The way <code>Option.flatMap</code> and <code>Option.map</code> work is:</p>

<ul>
<li>if called on an instance of <code>Some</code>, they&#8217;ll return another instance of <code>Some</code> containing the result of the specified
function.</li>
<li>if called on an instance of <code>None</code>, they&#8217;ll return <code>None</code>.</li>
</ul>


<p>Which means that should any of the calls to <code>conf.apply</code> in the previous code return <code>None</code>, the nested functions won&#8217;t
be evaluated at all and <code>None</code> will bubble back to <code>uri</code>.</p>

<p>Say, for example, that <code>conf("host")</code> isn&#8217;t defined:</p>

<ul>
<li><code>conf("protocol")</code> returns an instance of <code>Some[String]</code>. Calling <code>flatMap</code> on it returns the result of evaluating its
argument.</li>
<li><code>conf("host")</code> returns <code>None</code>. Calling <code>flatMap</code> on it returns <code>None</code> without evaluating its argument: the whole
<code>conf("port")</code> block isn&#8217;t executed, and <code>None</code> is returned immediately.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala's for-comprehension]]></title>
    <link href="http://nrinaudo.github.io/blog/2013/04/25/scalas-for-comprehension/"/>
    <updated>2013-04-25T15:36:00+02:00</updated>
    <id>http://nrinaudo.github.io/blog/2013/04/25/scalas-for-comprehension</id>
    <content type="html"><![CDATA[<p>Dear future self,</p>

<p>Today, I worked out that Scala&#8217;s for-comprehensions were just syntactic sugar for standard collection operations.
That&#8217;s exactly the kind of knowledge I tend to vaguely remember - just enough to know there&#8217;s something there, but not
enough to be actually useful.</p>

<p>The following post explains the conclusions I came to, should you ever need to refresh your memory.</p>

<!-- more -->


<h2>Generators</h2>

<p>Generators are the parts of for-comprehension that are used to produce the data to iterate over. As far as I can tell
(that is, it makes sense to me but I haven&#8217;t been able to get a confirmation one way or the other), anything that
inherits from <a href="http://www.scala-lang.org/api/current/index.html#scala.collection.generic.FilterMonadic"><code>FilterMonadic</code></a>
can be used as a generator.</p>

<h3>Without yield</h3>

<p>In a for-comprehension that doesn&#8217;t yield anything, generators are transformed into nested <code>foreach</code> calls:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// for-comprehension without a yield statement.</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="mi">4</span><span class="o">;</span>
</span><span class='line'>    <span class="n">y</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">((</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// De-sugared version of the for-comprehension.</span>
</span><span class='line'><span class="o">(</span><span class="mi">0</span> <span class="n">until</span> <span class="mi">4</span><span class="o">).</span><span class="n">foreach</span> <span class="o">{</span><span class="n">x</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="mi">0</span> <span class="n">until</span> <span class="n">x</span><span class="o">).</span><span class="n">foreach</span> <span class="o">{</span><span class="n">y</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">println</span><span class="o">((</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>With yield</h3>

<p>When for-comprehension yield values, however, all generators but the last one are transformed into nested <code>flatMap</code>
calls. The last generator is transformed into a <code>map</code> call.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// for-comprehension with a yield statement.</span>
</span><span class='line'><span class="k">val</span> <span class="n">f1</span> <span class="k">=</span> <span class="k">for</span><span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="mi">4</span><span class="o">;</span>
</span><span class='line'>             <span class="n">y</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">x</span><span class="o">)</span>
</span><span class='line'>         <span class="k">yield</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// De-sugared version of the for-comprehension.</span>
</span><span class='line'><span class="k">val</span> <span class="n">f2</span> <span class="k">=</span> <span class="o">(</span><span class="mi">0</span> <span class="n">until</span> <span class="mi">4</span><span class="o">).</span><span class="n">flatMap</span> <span class="o">{</span><span class="n">x</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="mi">0</span> <span class="n">until</span> <span class="n">x</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span><span class="n">y</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">assert</span><span class="o">(</span><span class="n">f1</span> <span class="o">==</span> <span class="n">f2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Guards</h2>

<p>Guards are conditional statements you can put in for-comprehensions that allow you to filter the generators that precede
them. They are, rather logically, transformed into calls to <code>withFilter</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// for-comprehension with a guard.</span>
</span><span class='line'><span class="k">val</span> <span class="n">f3</span> <span class="k">=</span> <span class="k">for</span><span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="mi">4</span><span class="o">;</span>
</span><span class='line'>             <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>             <span class="n">y</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">x</span><span class="o">)</span>
</span><span class='line'>         <span class="k">yield</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// De-sugared version of the for-comprehension.</span>
</span><span class='line'><span class="k">val</span> <span class="n">f4</span> <span class="k">=</span> <span class="o">(</span><span class="mi">0</span> <span class="n">until</span> <span class="mi">4</span><span class="o">).</span><span class="n">withFilter</span> <span class="o">{</span><span class="k">_</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">}.</span><span class="n">flatMap</span> <span class="o">{</span><span class="n">x</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="mi">0</span> <span class="n">until</span> <span class="n">x</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span><span class="n">y</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">assert</span><span class="o">(</span><span class="n">f3</span> <span class="o">==</span> <span class="n">f4</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
